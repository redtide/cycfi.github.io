{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to CYCFI organization!</p>"},{"location":"#about-the-author","title":"About the Author","text":"<p>Joel got into electronics and programming in the 80s because almost everything in music, his first love, is becoming electronic and digital. Since then, he builds his own guitars, effect boxes and synths. He enjoys playing distortion-laden rock guitar, composes and produces his own music in his home studio.</p> <p>Joel de Guzman is the principal architect and engineer at Cycfi Research and a consultant at Ciere Consulting. He is a software engineer specializing in advanced C++ and an advocate of Open Source. He has authored a number of highly successful Open Source projects such as Boost.Spirit, Boost.Phoenix and Boost.Fusion. These libraries are all part of the Boost Libraries, a well respected, peer-reviewed, Open Source, collaborative development effort.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#missing-submodules","title":"Missing submodules","text":"<p>Unfortunately GitHub doesn't include the required git submodules available in the repository in their zip / tar.gz packages, so you need to download the related source manually separately. This leads to the same error below also if you haven't cloned the repository with the <code>--recursive</code> / <code>recurse-submodules</code> switch, resulting with the error: <pre><code>CMake Error at lib/CMakeLists.txt:NNN (add_subdirectory):\n  The source directory\n    path/to/gitsubmodule\n  does not contain a CMakeLists.txt file.\n-- Configuring incomplete, errors occurred!\n</code></pre> run <code>git submodule update --init --recursive</code> from the project directory.</p>"},{"location":"artist/","title":"Home","text":""},{"location":"artist/#introduction","title":"Introduction","text":"<p>The Artist 2D Canvas Library is an abstraction layer with an API inspired by the HTML5 canvas API. The library presents a lean API modeled after the HTML Canvas 2D Context specification. The API is a not-so-thin layer above various 2D platform-specific and cross-platform 2D \"backend\" graphics libraries, such as Skia and Quartz-2D.</p> <p>The Artist library goes beyond the basic HTML5 canvas API with extensions for dealing with text layout and mechanisms for text editing, fonts and font management, path creation and manipulation, and image capture and offscreen graphics.</p>"},{"location":"artist/#documentation","title":"Documentation","text":"<ol> <li>Gallery</li> <li>Setup and Installation</li> <li>Backends</li> <li>Foundation</li> </ol>"},{"location":"artist/backends/","title":"Backends","text":"<p>Currently, Skia and Quartz-2D are supported. Historically, the Artist library was the 2D vector graphics component for the Elements Library, implemented using the Cairo 2D graphics library as the sole backend. After many years waiting for Cairo to support path effects, needed for modern GUI applications, it is apparent that Cairo development has gone stale with the latest entry stating \"cairo 1.16 (2017?)\". See Cairo Roadmap. It is probably forthcoming that Cairo support in the Elements library will be dropped and will not be ported to the Artist library (Although there is an initial port if someone is interested).</p> <p>Before Cairo, the precursor of the Artist library used NanoVG. It was then that the basic design principles took shape. Like Artist, the NanoVG API is modeled after HTML5 canvas API. NanoVG was dropped early on due to lack of support from its author, poor text rendering quality and inferior rendering quality (in general) compared to my gold standard: Quartz-2D. Currently, the NanoVG project is not actively maintained.</p> <p>It was a good decision to isolate the NanoVG backend with a clean-cut C++ canvas API. NanoVG had a C interface to begin with, so it was a necessary step. But isolating it in a well-defined API also meant that it could be replaced any time. If, on the other hand, I hard-coded application code to use NanoVG directly, I would have been locked to that specific library. Abstraction is the key. Libraries come and go. The king of the hill now, may be superseded by another \"better\" library in the future. Case in point: Cairo.</p> <p>There is also a half-baked Direct-2D port on windows, currently shelved. It is working, except for the text layout part which has its own text-layout engine. Direct-2D is such a pain to work with compared to other graphics libraries and for lack of time, for now, it is indefinitely shelved (Again, I welcome it if anyone wants to continue where I stopped).</p> <p>A few graphics libraries have splendid support for text-layout. Some don't, in particular, Skia. For Skia, I am using the Harfbuzz library for text-layout.</p>"},{"location":"artist/canvas/","title":"Canvas","text":""},{"location":"artist/canvas/#table-of-contents","title":"Table of Contents","text":"<ul> <li>path</li> <li>image</li> <li>text_layout</li> <li>canvas</li> </ul> <p>The canvas API is a derivative of and in line with the spirit the HTML5 canvas API, but using a slightly different syntax and naming convention following standard c++ style (e.g. using lower-case and underscores as word separators instead of camelCase).</p> <p>The canvas API is built on top of Foundation classes such as points and rectangles and some more drawable classes included in the page, such as paths and images. The <code>path</code> encapsulates compound (multiple contour) geometric paths consisting of straight line segments, quadratic curves, and cubic curves.</p>"},{"location":"artist/canvas/#path","title":"path","text":"<p>The <code>path</code> is the basic building block for a lot of drawing tasks that involve the <code>canvas</code>. The path is a mathematical description of shapes, that include lines, rectangles, cubic and quadratic curves, circles, arcs, etc. Each shape in the path is constructed using a set of primitives that represent instructions on how the path is formed.</p> <p>For efficiency, it is advisable to construct a <code>path</code> once and draw it multiple times. Graphics backends, especially those that involve the GPU, are optimized for immutable paths that are created outside the UI draw function.</p> <pre><code>class path\n{\npublic:\npath();\n~path();\npath(rect const&amp; r);\npath(rect const&amp; r, float radius);\npath(circle const&amp; c);\npath(std::string_view svg_def);\npath(path const&amp; rhs);\npath(path&amp;&amp; rhs);\npath&amp;             operator=(path const&amp; rhs);\npath&amp;             operator=(path&amp;&amp; rhs);\nbool              operator==(path const&amp; rhs) const;\nbool              operator!=(path const&amp; rhs) const;\nbool              is_empty() const;\nbool              includes(point p) const;\nbool              includes(float x, float y) const;\nrect              bounds() const;\nvoid              close();\nvoid              add_rect(rect const&amp; r);\nvoid              add_round_rect(rect const&amp; r, float radius);\nvoid              add_circle(circle const&amp; c);\nvoid              add_rect(float x, float y, float width, float height);\nvoid              add_round_rect(\nfloat x, float y,\nfloat width, float height,\nfloat radius\n);\nvoid              add_circle(float cx, float cy, float radius);\nvoid              move_to(point p);\nvoid              line_to(point p);\nvoid              arc_to(point p1, point p2, float radius);\nvoid              arc(\npoint p, float radius,\nfloat start_angle, float end_angle,\nbool ccw = false\n);\nvoid              quadratic_curve_to(point cp, point end);\nvoid              bezier_curve_to(point cp1, point cp2, point end);\nvoid              move_to(float x, float y);\nvoid              line_to(float x, float y);\nvoid              arc_to(\nfloat x1, float y1,\nfloat x2, float y2,\nfloat radius\n);\nvoid              arc(\nfloat x, float y, float radius,\nfloat start_angle, float end_angle,\nbool ccw = false\n);\nvoid              quadratic_curve_to(float cpx, float cpy, float x, float y);\nvoid              bezier_curve_to(\nfloat cp1x, float cp1y,\nfloat cp2x, float cp2y,\nfloat x, float y\n);\nenum fill_rule_enum\n{\nfill_winding,\nfill_odd_even\n};\nvoid              fill_rule(fill_rule_enum rule);\npath_impl*        impl();\npath_impl const*  impl() const;\n};\n</code></pre>"},{"location":"artist/canvas/#expressions","title":"Expressions","text":"<pre><code>// Default constructor [1].\npath{}\n// Constructors [2].\npath{ r }\npath{ r, radius }\npath{ c }\npath{ svg_def }\n// Copy constructor. [3]\npath{ p }\n// Assignment [4]\np = p2\n// Equality [5]\np == p2\n// Non-equality [6]\np != p2\n// Check for empty path [7]\np.empty()\n// Check for inclusion [8]\np.includes(pt)\np.includes(x, y)\n// Get the path bounds [9]\np.bounds()\n// Close path [10]\np.close()\n// Add rectangle [11]\np.add_rect(r)\np.add_rect(x, y, width height)\n// Add rounded rectangle [12]\np.add_round_rect(r, radius)\np.add_round_rect(x, y, width height, radius)\n// Add circle [13]\np.add_circle(c)\np.add_circle(cx, cy, radius)\n// Move current point [14]\np.move_to(pt)\np.move_to(x, y)\n// Add an arc [15]\np.arc_to(pt1, pt2, radius)\np.arc_to(x1, y1, x2, y2, radius)\n// Add an arc [16]\np.arc(pt, radius, start_angle, end_angle, ccw)\np.arc(pt, radius, start_angle, end_angle)\np.arc(x, y, radius, start_angle, end_angle, ccw)\np.arc(x, y, radius, start_angle, end_angle)\n// Add a quadratic B\u00e9zier curve [17]\np.quadratic_curve_to(cp, end)\np.quadratic_curve_to(cpx, cpy, x, y)\n// Add a cubic B\u00e9zier curve [18]\np.bezier_curve_to(cp1, cp2, end)\np.bezier_curve_to(cp1x, cp1y, cp2x, cp2y, x, y)\n// Set the fill-rule [19]\np.fill_rule(fr)\n</code></pre>"},{"location":"artist/canvas/#notation","title":"Notation","text":"<p>| <code>r</code>                               | Instance of <code>rect</code>.                  | | <code>pt</code>, <code>pt1</code>, <code>pt2</code>                | Instance of <code>point</code>.                 | | <code>cp</code>, <code>cp1</code>, <code>cp2</code>, <code>end</code>         | Instance of <code>point</code>.                 | | <code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>       | Scalar values.                       | | <code>radius</code>, <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>  | Scalar values.                       | | <code>cpx</code>, <code>cpy</code>                      | Scalar values.                       | | <code>start_angle</code>, <code>end_angle</code>        | Scalar values.                       | | <code>ccw</code>                             | A Boolean value.                     | | <code>c</code>                               | Instance of <code>circle</code>.                | | <code>svg_def</code>                         | Instance of <code>std::string_view</code>.      | | <code>p</code>, <code>p2</code>                         | Instance of <code>path</code>                   | | <code>fr</code>                              | Instance of <code>path::fill_rule_enum</code>   |</p>"},{"location":"artist/canvas/#semantics","title":"Semantics","text":"<ol> <li>Default construct a <code>path</code>.</li> <li>Construct a <code>path</code>:<ol> <li>A rectangle from a <code>rect</code>, <code>r</code>.</li> <li>A rounded-rectangle from a <code>rect</code>, <code>r</code>, and <code>radius</code>.</li> <li>A circle from a <code>circle</code>, <code>c</code>.</li> <li>A complex path from a string view that conforms to the syntax of an    SVG path element.</li> </ol> </li> <li>Copy construct a <code>path</code>, <code>p</code>.</li> <li>Assign <code>p2</code>, to <code>p</code>.</li> <li>Returns <code>true</code> if a <code>p2</code>, is equal to <code>p</code>.</li> <li>Returns <code>true</code> if <code>p2</code>, is not equal to a <code>p</code>.</li> <li>Returns <code>true</code> if <code>p</code> is empty.</li> <li>Returns <code>true</code> if point <code>pt</code> (or <code>x, y</code>) is inside <code>p</code>.</li> <li>Get the smallest rectangle that encapsulates the path, <code>p</code>.</li> <li>Close the current shape.</li> <li>Add rectangle, <code>r</code> (or <code>x, y, width height</code>), to the current path.</li> <li>Add rounded rectangle, <code>r, radius</code> (or `x, y, width, height, radius``) to     the current path.</li> <li>Add circle, <code>c</code> (or <code>cx, cy, radius</code>) to the current path.</li> <li>Move the current point to <code>pt</code> (or <code>x, y</code>).</li> <li>Add an arc, to the current path, between two tangents <code>pt1</code> and <code>pt2</code> (or     <code>x1, y1, x2, y2</code>) with the given <code>radius</code>.</li> <li>Add an arc, to the current path, given a center point, <code>pt</code> (or <code>x, y</code>),     <code>start_angle</code> (in radians) and an <code>end_angle</code> and a <code>bool</code> flag, <code>ccw</code>,     that specifies whether counterclockwise (flag is <code>false</code>) or clockwise     (flag is 'true<code>). The default is</code>false` (clockwise).</li> <li>Add a quadratic B\u00e9zier curve to the current path using the specified     control point, <code>cp</code> (or <code>cpx, cpy</code>) and ending point<code>end</code> (or <code>x, y</code>).     The starting point for the curve is the current point.</li> <li>Add a cubic B\u00e9zier curve to the current path using the specified control     points <code>cp1</code> and <code>cp2</code> (or <code>cp1x, cp1y</code> and <code>cp2x, cp2y</code>) and ending     point<code>end</code> (or <code>x, y</code>). The starting point for the curve is the current     point.</li> <li>Set the path's fill rule to <code>fr</code> (which can be <code>path::fill_winding</code> or     <code>path::fill_odd_even</code>).</li> </ol>"},{"location":"artist/foundation/","title":"Foundation","text":""},{"location":"artist/foundation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>point</li> <li>extent</li> <li>rect</li> <li>circle</li> <li>color<ul> <li>Predefined Colors</li> </ul> </li> <li>font_descr</li> <li>font</li> <li>resources</li> </ul> <p>The Foundation classes provide support for the Artist library, especially for the <code>canvas</code> class.</p>"},{"location":"artist/foundation/#point","title":"point","text":"<p>The point indicates position in the 2D cartesian coordinate space, represented by the <code>x</code> and <code>y</code> coordinates:</p>"},{"location":"artist/foundation/#declaration","title":"Declaration","text":"<pre><code>struct point\n{\npoint();\npoint(float x, float y);\npoint(point const&amp;) = default;\npoint&amp;      operator=(point const &amp;) = default;\nbool        operator==(point const&amp; other) const;\nbool        operator!=(point const&amp; other) const;\npoint       move(float dx, float dy) const;\npoint       move_to(float x, float y) const;\npoint       reflect(point p) const;\nfloat       x;\nfloat       y;\n};\n</code></pre>"},{"location":"artist/foundation/#expressions","title":"Expressions","text":""},{"location":"artist/foundation/#notation","title":"Notation","text":"<p>| <code>x</code>, <code>y</code>     | Scalar coordinates. | | <code>dx</code>, <code>dy</code>   | Relative scalar coordinates. | | <code>p</code>, <code>p2</code>    | Instance of <code>point</code> |</p>"},{"location":"artist/foundation/#constructors-and-assignment","title":"Constructors and assignment","text":"<pre><code>// Default constructor [1].\npoint{}\n// Constructor [2].\npoint{ x, y }\n// Copy constructor. [3]\npoint{ p }\n// Assignment [4]\np = p2\n</code></pre>"},{"location":"artist/foundation/#semantics","title":"Semantics","text":"<ol> <li>Default construct a <code>point</code> with initial values <code>{ 0, 0 }</code></li> <li>Construct a <code>point</code> given initial values <code>x</code>, and <code>y</code>.</li> <li>Copy construct a <code>point</code>, <code>p</code>.</li> <li>Assign <code>p2</code>, to <code>p</code>.</li> </ol>"},{"location":"artist/foundation/#equality","title":"Equality","text":"<pre><code>// Equality [1]\np == p2\n// Non-equality [2]\np != p2\n</code></pre>"},{"location":"artist/foundation/#semantics_1","title":"Semantics","text":"<ol> <li>Returns <code>true</code> if <code>p2</code>, is equal to <code>p</code>.</li> <li>Returns <code>true</code> if <code>p2</code>, is not equal to <code>p</code>.</li> </ol>"},{"location":"artist/foundation/#transformation","title":"Transformation","text":"<pre><code>// Move [1]\np.move(dx, dy)\n// Move To [2]\np.move_to(x, y)\n// Reflection [3]\np.reflect(p2)\n</code></pre>"},{"location":"artist/foundation/#semantics_2","title":"Semantics","text":"<ol> <li>Move <code>p</code> <code>dx</code> and <code>dy</code> distance relative to <code>p</code>. Non-mutating. Returns the    moved instance of <code>point</code>.</li> <li>Move <code>p</code> to absolute coordinates <code>x</code> and <code>y</code>. Non-mutating. Returns the    moved instance of <code>point</code>.</li> <li>Reflect a <code>point</code>, <code>p</code>, at 180 degree rotation of point, <code>point</code>.    Non-mutating. Returns the reflected instance of <code>point</code>.</li> </ol>"},{"location":"artist/foundation/#member-access","title":"Member access","text":"<pre><code>p.x\np.y\n</code></pre>"},{"location":"artist/foundation/#semantics_3","title":"Semantics","text":"<ol> <li>Direct access to members <code>x</code> and <code>y</code>.</li> </ol>"},{"location":"artist/foundation/#extent","title":"extent","text":"<p>The <code>extent</code> struct is a specialization of <code>point</code> but deletes the members <code>move</code>, <code>move_to</code>, and <code>reflect</code>. <code>extent</code> is intended for specifying 2-dimensional sizes.</p>"},{"location":"artist/foundation/#declaration_1","title":"Declaration","text":"<pre><code>struct extent : point\n{\nusing point::point;\nextent(point p);\npoint       move(float dx, float dy) const = delete;\npoint       move_to(float x, float y) const = delete;\npoint       reflect(point p) const = delete;\n};\n</code></pre>"},{"location":"artist/foundation/#rect","title":"rect","text":"<p>The <code>rect</code> struct represents a 2-dimensional rectangle specified by the <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code> coordinates.</p>"},{"location":"artist/foundation/#declaration_2","title":"Declaration","text":"<pre><code>struct rect\n{\nrect();\nrect(float left, float top, float right, float bottom);\nrect(point origin, float right, float bottom)\nrect(point top_left, point bottom_right);\nrect(float left, float top, extent size);\nrect(point origin, extent size);\nrect(rect const&amp;) = default;\nrect&amp;       operator=(rect const&amp;) = default;\nbool        operator==(rect const&amp; other) const;\nbool        operator!=(rect const&amp; other) const;\nbool        is_empty() const;\nbool        includes(point p) const;\nbool        includes(rect const&amp; other) const;\nfloat       width() const;\nvoid        width(float w);\nfloat       height() const;\nvoid        height(float h);\nextent      size() const;\npoint       top_left() const;\npoint       bottom_right() const;\npoint       top_right() const;\npoint       bottom_left() const;\nrect        move(float dx, float dy) const;\nrect        move_to(float x, float y) const;\nrect        inset(float x = 1.0, float y = 1.0) const;\nfloat       left;\nfloat       top;\nfloat       right;\nfloat       bottom;\n};\n</code></pre>"},{"location":"artist/foundation/#free-functions","title":"Free Functions","text":"<pre><code>bool           is_valid(rect const&amp; r);\nbool           is_same_size(rect const&amp; a, rect const&amp; b);\nbool           intersects(rect const&amp; a, rect const&amp; b);\npoint          center_point(rect const&amp; r);\nfloat          area(rect const&amp; r);\nrect           union_(rect const&amp; a, rect const&amp; b);\nrect           intersection(rect const&amp; a, rect const&amp; b);\nrect           center(rect const&amp; r, rect const&amp; encl);\nrect           center_h(rect const&amp; r, rect const&amp; encl);\nrect           center_v(rect const&amp; r, rect const&amp; encl);\nrect           align(rect const&amp; r, rect const&amp; encl, float x, float y);\nrect           align_h(rect const&amp; r, rect const&amp; encl, float x);\nrect           align_v(rect const&amp; r, rect const&amp; encl, float y);\n</code></pre>"},{"location":"artist/foundation/#expressions_1","title":"Expressions","text":""},{"location":"artist/foundation/#notation_1","title":"Notation","text":"<p>| <code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>     | Scalar coordinates.            | | <code>x</code>, <code>y</code>, <code>w</code>, <code>h</code>                   | Scalar coordinates.            | | <code>dx</code>, <code>dy</code>                           | Relative scalar coordinates.   | | <code>origin</code>, <code>top_left</code>, <code>bottom_right</code> | Instance of <code>point</code>.           | | <code>size</code>                               | Instance of <code>extent</code>.          | | <code>r</code>, <code>r2</code>                            | Instance of <code>rect</code>.            |</p>"},{"location":"artist/foundation/#constructors-and-assignment_1","title":"Constructors and assignment","text":"<pre><code>// Default constructor [1].\nrect{}\n// Constructor [2].\nrect{ left, top, right, bottom }\n// Constructor [3].\nrect{ origin, right, bottom }\n// Constructor [4].\nrect{ top_left, bottom_right }\n// Constructor [5].\nrect{ left, top, size }\n// Constructor [6].\nrect{ origin, size }\n// Copy constructor [7].\nrect{ r }\n// Assignment [8]\nr = r2\n</code></pre>"},{"location":"artist/foundation/#semantics_4","title":"Semantics","text":"<ol> <li>Default construct a <code>rect</code> with initial values <code>{ 0, 0, 0, 0 }</code></li> <li>Construct a <code>rect</code> given initial values <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</li> <li>Construct a <code>rect</code> given <code>origin</code> (point), <code>right</code> and bottom`.</li> <li>Construct a <code>rect</code> given <code>top_left</code>, <code>bottom_right</code> points.</li> <li>Construct a <code>rect</code> given <code>left</code>, <code>top</code>, and <code>size</code> (extent).</li> <li>Construct a <code>rect</code> given <code>origin</code>, and <code>size</code> (extent).</li> <li>Copy construct a <code>rect</code>, <code>r</code>.</li> <li>Assign <code>r2</code> to <code>r</code>.</li> </ol>"},{"location":"artist/foundation/#equality_1","title":"Equality","text":"<pre><code>// Equality [1]\nr == r2\n// Non-equality [2]\nr != r2\n</code></pre>"},{"location":"artist/foundation/#semantics_5","title":"Semantics","text":"<ol> <li>Returns <code>true</code> if a <code>r2</code> is equal <code>r</code>.</li> <li>Returns <code>true</code> if a <code>r2</code> is not equal to <code>r</code>.</li> </ol>"},{"location":"artist/foundation/#query","title":"Query","text":"<pre><code>// Check for empty rectangle [1]\nr.empty()\n// Check for inclusion [2]\nr.includes(p)\nr.includes(r2)\n// Get the width and height [3]\nr.width()\nr.height()\n// Get the size [4]\nr.size()\n// Get the rectangle corners [5]\nr.top_left()\nr.bottom_right()\nr.top_right()\nr.bottom_left()\n</code></pre>"},{"location":"artist/foundation/#semantics_6","title":"Semantics","text":"<ol> <li>Returns <code>true</code> if <code>r</code> is empty. Equivalent to <code>r.size() == extent{ 0, 0 }</code>.</li> <li>Inclusion:<ol> <li>Returns true if <code>p</code> is inside <code>r</code>.</li> <li>Returns true if <code>r2</code> is completely inside <code>r</code>.</li> </ol> </li> <li>Returns the width and height of the <code>r</code>. Returns a scalar value.</li> <li>Get the size of <code>r</code>. Returns an instance of <code>extent</code>.</li> <li>Get the top-left, bottom-right, top-right, and bottom-left corners or     rectangle, <code>r</code>. Returns an instance of <code>point</code>.</li> </ol>"},{"location":"artist/foundation/#mutation","title":"Mutation","text":"<pre><code>// Set the width and height [1]\nr.height(w)\nr.width(h)\n</code></pre>"},{"location":"artist/foundation/#semantics_7","title":"Semantics","text":"<ol> <li>Sets the width and height of <code>r</code> to <code>w</code> and <code>h</code>, respectively.</li> </ol>"},{"location":"artist/foundation/#transformation_1","title":"Transformation","text":"<pre><code>// Move [1]\nr.move(dx, dy)\n// Move To [2]\nr.move_to(x, y)\n// Inset [3]\nr.inset(x, y)\nr.inset(xy)\n</code></pre>"},{"location":"artist/foundation/#semantics_8","title":"Semantics","text":"<ol> <li>Move origin of <code>r</code> by <code>dx</code> and <code>dy</code> distance. Non-mutating. Returns the     moved instance of <code>rect</code>.</li> <li>Move origin of <code>r</code> to absolute coordinates <code>x</code> and <code>y</code>. Non-mutating.     Returns the moved instance of <code>rect</code>.</li> <li>Inset <code>r</code> by <code>x</code> and <code>y</code> (in each dimension), or by <code>xy</code> (in both x and y     dimensions). The rect <code>r</code> is shrunk if <code>x</code>, <code>y</code> or <code>xy</code> are positive,     otherwise, expanded if negative. Non-mutating. Returns the inset instance     of <code>rect</code>.</li> </ol>"},{"location":"artist/foundation/#free-query-functions","title":"Free Query Functions","text":"<pre><code>// Check for validity [1]\nis_valid(r)\n// Check for size equality [2]\nis_same_size(r, r2)\n// Check for intersection [3]\nintersects(r, r2)\n// Compute the center point [4]\ncenter_point(r)\n// Compute the area [5]\narea(r)\n// Compute the union of two rectangles [6]\nunion_(r, r2)\n// Compute the intersection of two rectangles [7]\nintersection(r, r2)\n</code></pre>"},{"location":"artist/foundation/#semantics_9","title":"Semantics","text":"<ol> <li>Return <code>true</code> if <code>r</code> is a valid rectangle (left &lt;= right &amp;&amp; top &lt;=     bottom).</li> <li>Return <code>true</code> if <code>r</code> and <code>r2</code> have the same size. Equivalent to <code>r.size()     == r2.size()</code>.</li> <li>Return <code>true</code> if <code>r</code> intersects with <code>r2</code>.</li> <li>Returns the center point of <code>r</code>. returns an instance of <code>point</code>.</li> <li>Returns the area of <code>r</code>. Equivalent to <code>r.width() * r.height()</code>. Returns     a scalar value.</li> <li>Compute the union of two rectangles. Returns an instance of <code>rect</code>.</li> <li>Compute the intersection of two rectangles. Returns an instance of     <code>rect</code>.</li> </ol>"},{"location":"artist/foundation/#free-transformation-functions","title":"Free Transformation Functions","text":"<pre><code>// Center a rectangle [1]\ncenter(r, r2)\ncenter_h(r, r2)\ncenter_v(r, r2)\n// Align a rectangle [2]\nalign(r, r2, x, y)\nalign_h(r, r2, x)\nalign_v(r, r2, y)\n</code></pre>"},{"location":"artist/foundation/#semantics_10","title":"Semantics","text":"<ol> <li>Center <code>r</code> in <code>r2</code>. Returns an instance of <code>rect</code>.<ol> <li><code>center</code>: In both dimensions</li> <li><code>center_h</code>: Horizontally</li> <li><code>center_v</code>: Vertically</li> </ol> </li> <li>Align <code>r</code> in <code>r2</code>. Given scalar <code>x</code> and <code>y</code> values, 0.0 aligns <code>r</code> to the     left or top, 1.0 aligns <code>r</code> to the right or bottom, 0.5 aligns <code>r</code> center     or middle. Returns an instance of <code>rect</code>.<ol> <li><code>align</code>: In both dimensions by <code>x</code> and <code>y</code>, where <code>x</code> and <code>y</code> are    fractional values from 0.0 to 1.0.</li> <li><code>align_h</code>: Horizontally by <code>x</code>, where <code>x</code> is a fractional value from    0.0 to 1.0.</li> <li><code>align_v</code>: Vertically by <code>y</code>, where <code>y</code> is a fractional value from 0.0    to 1.0.</li> </ol> </li> </ol>"},{"location":"artist/foundation/#member-access_1","title":"Member Access","text":"<pre><code>// Member access [1]\nr.left\nr.top\nr.right\nr.bottom\n</code></pre>"},{"location":"artist/foundation/#semantic","title":"Semantic","text":"<ol> <li>Direct access to members <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code></li> </ol>"},{"location":"artist/foundation/#circle","title":"circle","text":"<p>The circle is represented by a center point and radius:</p> <pre><code>struct circle\n{\ncircle();\ncircle(float cx, float cy, float radius);\ncircle(point c, float radius);\ncircle(rect const&amp; r);\ncircle(circle const&amp;) = default;\ncircle&amp;     operator=(circle const&amp;) = default;\nrect        bounds() const;\nbool        operator==(circle const&amp; other) const;\nbool        operator!=(circle const&amp; other) const;\npoint       center() const;\ncircle      inset(float x) const;\ncircle      move(float dx, float dy) const;\ncircle      move_to(float x, float y) const;\nfloat       cx;\nfloat       cy;\nfloat       radius;\n};\n</code></pre>"},{"location":"artist/foundation/#expressions_2","title":"Expressions","text":"<pre><code>// Default constructor [1].\ncircle{}\n// Constructor [2].\ncircle{ x, y, radius }\n// Copy constructor. [3]\ncircle{ c }\n// Assignment [4]\nc = c2\n// Equality [5]\nc == c2\n// Non-equality [6]\nc != c2\n// Bounds [7]\nc.bounds()\n// Get the center [8]\nc.center()\n// Inset [9]\nc.inset(x)\n// Move [10]\nc.move(dx, dy)\n// Move To [11]\nc.move_to(x, y)\n// Member access [12]\nc.cx\nc.cy\nc.radius\n</code></pre>"},{"location":"artist/foundation/#notation_2","title":"Notation","text":"<p>| <code>x</code>, <code>y</code>, <code>radius</code>          | Scalar coordinates.   | | <code>dx</code>, <code>dy</code>, <code>radius</code>        | Scalar coordinates.   | | <code>c</code>, <code>c2</code>                   | Instance of <code>circle</code>. |</p>"},{"location":"artist/foundation/#semantics_11","title":"Semantics","text":"<ol> <li>Default construct a <code>circle</code> with initial values <code>{ 0, 0, 0 }</code></li> <li>Construct a <code>circle</code> given initial values <code>x</code>, <code>y</code>, and <code>radius</code>.</li> <li>Copy construct a <code>circle</code>, <code>c</code>.</li> <li>Assign <code>c2</code> to <code>c</code>.</li> <li>Returns <code>true</code> if a <code>c2</code> is equal <code>c</code>.</li> <li>Returns <code>true</code> if a <code>c2</code> is not equal to <code>c</code>.</li> <li>Get the bounds: smallest <code>rect</code> that encloses <code>c</code>. Returns an instance of    <code>rect</code>.</li> <li>Get the center of <code>c</code>. Returns an instance of <code>point</code>.</li> <li>Inset <code>c</code> by <code>x</code>.</li> <li>Move center of <code>c</code> by <code>dx</code> and <code>dy</code> distance. Returns the moved instance     of <code>circle</code>.</li> <li>Move center of <code>c</code> to absolute coordinates <code>x</code> and <code>y</code>. Returns the     moved instance of <code>circle</code>.</li> <li>Direct access to members <code>cx</code>, <code>cy</code>, and <code>radius</code></li> </ol>"},{"location":"artist/foundation/#color","title":"color","text":"<p>Color is represented by <code>red</code>, <code>green</code>, <code>blue</code>, and <code>alpha</code>:</p> <pre><code>struct color\n{\ncolor();\ncolor(float red, float green, float blue, float alpha = 1.0f);\ncolor       opacity(float alpha_) const;\ncolor       level(float amount) const;\nfloat       red   = 0.0f;\nfloat       green = 0.0f;\nfloat       blue  = 0.0f;\nfloat       alpha = 0.0f;\n};\n</code></pre>"},{"location":"artist/foundation/#free-functions_1","title":"Free Functions","text":"<pre><code>bool     operator==(color const&amp; a, color const&amp; b);\nbool     operator!=(color const&amp; a, color const&amp; b);\ncolor    rgb(std::uint32_t rgb);\ncolor    rgba(std::uint32_t rgba);\ncolor    rgb(std::uint8_t r, std::uint8_t g, std::uint8_t b);\ncolor    rgba(std::uint8_t r, std::uint8_t g, std::uint8_t b, std::uint8_t a);\ncolor    hsl(float h, float sl, float l);\n</code></pre>"},{"location":"artist/foundation/#expressions_3","title":"Expressions","text":"<pre><code>// Default constructor [1].\ncolor{}\n// Constructor [2].\ncolor{ red, green, blue, alpha }\n// Copy constructor. [3]\ncolor{ c }\n// Assignment [4]\nc = c2\n// Equality [5]\nc == c2\n// Non-equality [6]\nc != c2\n// Opacity\nopacity(val) [7]\n// Linear level\nlevel(amount) [8]\n// RGB and RGBA from uint32_t [9]\nrgb(urgb);\nrgba(urgb);\n// RGB and RGBA from uint8_t reg, green, blue, and alpha components [10]\nrgb(ured, ugreen, ublue);\nrgba(ured, ugreen, ublue, ualpha);\n// RGB from HSL [11]\nhsl(h, sl, l);\n</code></pre>"},{"location":"artist/foundation/#notation_3","title":"Notation","text":"<p>| <code>red</code>, <code>red</code>, <code>red</code>, <code>alpha</code>   | Scalar values.              | | <code>val</code>, <code>amount</code>                | Scalar values.              | | <code>c</code>, <code>c2</code>                      | Instance of <code>color</code>.        | | <code>urgb</code>                         | Instance of <code>std::uint32_t  | |</code>ured<code>,</code>ugreen<code>,</code>ublue<code>| Instance of</code>std::uint8_t   |</p>"},{"location":"artist/foundation/#semantics_12","title":"Semantics","text":"<ol> <li>Default construct a <code>color</code> with initial values <code>{ 0, 0, 0, 0 }</code></li> <li>Construct a <code>color</code> given initial values <code>red</code>, <code>green</code>, <code>blue</code>, and    <code>alpha</code>. The floating point values range from 0.0 to 1.0.</li> <li>Copy construct a <code>color</code>, <code>c</code>.</li> <li>Assign <code>c2</code> to <code>c</code>.</li> <li>Returns <code>true</code> if a <code>c2</code> is equal <code>c</code>.</li> <li>Returns <code>true</code> if a <code>c2</code> is not equal to <code>c</code>.</li> <li>Sets the opacity (alpha) to <code>val</code>. Returns an instance of <code>color</code>.</li> <li>Multiplies all color components by <code>amount</code>. Returns an instance of <code>color</code>.</li> <li>Create an RGB or RGBA color from a <code>uint32_t</code> or the form rrggbb or    rrggbbaa respectively, typically with using hex literals (e.g.    0xffffffff).</li> <li>Create an RGB or RGBA color from <code>uint8_t</code> reg, green, blue, and alpha     components, where each component range from <code>0</code> to <code>255</code>.</li> <li>Create an RBB color from HSL.</li> </ol>"},{"location":"artist/foundation/#predefined-colors","title":"Predefined Colors","text":"<p>Namespace <code>cycfi::artist::colors</code> contains some predefined colors, including 256 levels of grays. You normally use the colors, by hoisting the namespace into your own namespace:</p> <pre><code>namespace colors = cycfi::artist::colors;\n</code></pre> <p>The colors provided are from CSS: Named Colors and Hex Equivalents</p>"},{"location":"artist/foundation/#the-colors","title":"The colors","text":"<pre><code>alice_blue,\nantique_white,\naquamarine,\nazure,\nbeige,\nbisque,\nblack,\nblanched_almond,\nblue,\nblue_violet,\nbrown,\nburly_wood,\ncadet_blue,\nchartreuse,\nchocolate,\ncoral,\ncornflower_blue,\ncorn_silk,\ncyan,\ndark_goldenrod,\ndark_green,\ndark_khaki,\ndark_olive_green,\ndark_orange,\ndark_orchid,\ndark_salmon,\ndark_sea_green,\ndark_slate_blue,\ndark_slate_gray,\ndark_turquoise,\ndark_violet,\ndeep_pink,\ndeep_sky_blue,\ndim_gray,\ndodger_blue,\nfirebrick,\nfloral_white,\nforest_green,\ngains_boro,\nghost_white,\ngold,\ngoldenrod,\ngreen,\ngreen_yellow,\nhoneydew,\nhot_pink,\nindian_red,\nivory,\nkhaki,\nlavender,\nlavender_blush,\nlawn_green,\nlemon_chiffon,\nlight_blue,\nlight_coral,\nlight_cyan,\nlight_goldenrod,\nlight_goldenrod_yellow,\nlight_gray,\nlight_pink,\nlight_salmon,\nlight_sea_green,\nlight_sky_blue,\nlight_slate_blue,\nlight_slate_gray,\nlight_steel_blue,\nlight_yellow,\nlime_green,\nlinen,\nmagenta,\nmaroon,\nmedium_aquamarine,\nmedium_blue,\nmedium_forest_green,\nmedium_goldenrod,\nmedium_orchid,\nmedium_purple,\nmedium_sea_green,\nmedium_slate_blue,\nmedium_spring_green,\nmedium_turquoise,\nmedium_violet_red,\nmidnight_blue,\nmint_cream,\nmisty_rose,\nmoccasin,\nnavajo_white,\nnavy,\nnavy_blue,\nold_lace,\nolive_drab,\norange,\norange_red,\norchid,\npale_goldenrod,\npale_green,\npale_turquoise,\npale_violet_red,\npapaya_whip,\npeach_puff,\nperu,\npink,\nplum,\npowder_blue,\npurple,\nred,\nrosy_brown,\nroyal_blue,\nsaddle_brown,\nsalmon,\nsandy_brown,\nsea_green,\nsea_shell,\nsienna,\nsky_blue,\nslate_blue,\nslate_gray,\nsnow,\nspring_green,\nsteel_blue,\ntan,\nthistle,\ntomato,\nturquoise,\nviolet,\nviolet_red,\nwheat,\nwhite,\nwhite_smoke,\nyellow,\nyellow_green\n// greys\ngray[0] ... gray[255]\nauto grey = gray; // Synonym\n</code></pre>"},{"location":"artist/foundation/#font_descr","title":"font_descr","text":"<p><code>font_desr</code> is a lightweight class that describes a font, including its weight (e.g. bold), slant (e.g. italic), and stretch (e.g. condensed).</p> <pre><code>namespace font_constants\n{\nenum weight_enum\n{\nthin              = 10,\nextra_light       = 20,\nlight             = 30,\nweight_normal     = 40,\nmedium            = 50,\nsemi_bold         = 60,\nbold              = 70,\nextra_bold        = 80,\nblack             = 90,\nextra_black       = 95,\n};\nenum slant_enum\n{\nslant_normal      = 0,\nitalic            = 90,\noblique           = 100\n};\nenum stretch_enum\n{\nultra_condensed   = 25,\nextra_condensed   = 31,\ncondensed         = 38,\nsemi_condensed    = 44,\nstretch_normal    = 50,\nsemi_expanded     = 57,\nexpanded          = 63,\nextra_expanded    = 75,\nultra_expanded    = 100\n};\n}\nstruct font_descr\n{\nfont_descr           normal() const;\nfont_descr           size(float size_) const;\nfont_descr           weight(font_constants::weight_enum w) const;\nfont_descr           thin() const;\nfont_descr           extra_light() const;\nfont_descr           light() const;\nfont_descr           weight_normal() const;\nfont_descr           medium() const;\nfont_descr           semi_bold() const;\nfont_descr           bold() const;\nfont_descr           extra_bold() const;\nfont_descr           black() const;\nfont_descr           extra_black() const;\nfont_descr           style(font_constants::slant_enum s) const;\nfont_descr           slant_normal() const;\nfont_descr           italic() const;\nfont_descr           oblique() const;\nfont_descr           stretch(font_constants::stretch_enum s) const;\nfont_descr           ultra_condensed() const;\nfont_descr           extra_condensed() const;\nfont_descr           condensed() const;\nfont_descr           semi_condensed() const;\nfont_descr           stretch_normal() const;\nfont_descr           semi_expanded() const;\nfont_descr           expanded() const;\nfont_descr           extra_expanded() const;\nfont_descr           ultra_expanded() const;\nusing slant_enum = font_constants::slant_enum;\nstd::string_view     _families;\nfloat                _size = 12;\nuint8_t              _weight = font_constants::weight_normal;\nslant_enum           _slant = font_constants::slant_normal;\nuint8_t              _stretch = font_constants::stretch_normal;\n};\n</code></pre>"},{"location":"artist/foundation/#expressions_4","title":"Expressions","text":"<pre><code>// Constructors [1].\nfont_descr{}\nfont_descr{ families }\nfont_descr{ families, sz }\nfont_descr{ families, sz, wt }\nfont_descr{ families, sz, wt, sl }\nfont_descr{ families, sz, wt, sl, str }\n// Normal [2]\nf.normal()\n// Sized [3]\nf.size(size)\n// Weight [4]\nf.weight(wt)\nf.thin()\nf.extra_light()\nf.light()\nf.weight_normal()\nf.medium()\nf.semi_bold()\nf.bold()\nf.extra_bold()\nf.black()\nf.extra_black()\n// Slant [5]\nf.style(sl)\nf.slant_normal()\nf.italic()\nf.oblique()\n// Stretch [6]\nf.stretch(str)\nf.ultra_condensed()\nf.extra_condensed()\nf.condensed()\nf.semi_condensed()\nf.stretch_normal()\nf.semi_expanded()\nf.expanded()\nf.extra_expanded()\nf.ultra_expanded()\n// Member access [7]\nf._families\nf._size\nf._weight\nf._slant\nf._stretch\n</code></pre>"},{"location":"artist/foundation/#notation_4","title":"Notation","text":"<p>| <code>families</code>   | Comma separated list of font families to search for.               | | <code>sz</code>         | A scalar value.                                                    | | <code>wt</code>         | A <code>weight_enum</code> (see <code>font_constants</code> above) or a scalar value.    | | <code>sl</code>         | A <code>slant_enum</code> (see <code>font_constants</code> above) or a scalar value.     | | <code>str</code>        | A <code>stretch_enum</code> (see <code>font_constants</code> above) or a scalar value.   | | <code>f</code>          | An instance of <code>font_descr</code>.                                       |</p> <p>:point_right: <code>families</code> is a comma separated list of font families to search for. Given a <code>font_descr</code>, the <code>font</code> class will search the system for a match, iterating over the list of font families, and will load first available font that matches the font descriptor.</p>"},{"location":"artist/foundation/#semantics_13","title":"Semantics","text":"<ol> <li>Constructors for the <code>font_descr</code> struct given initial values.</li> <li>Returns a copy of the <code>font_desr</code>, <code>f</code>, with default values. Returns    instance of <code>font_descr</code>.</li> <li>Returns a copy of the <code>font_desr</code>, <code>f</code>, with the given font size. Returns    instance of <code>font_descr</code>.</li> <li>Returns a copy of the <code>font_desr</code>, <code>f</code>, with the given font weight.    Returns instance of <code>font_descr</code>.</li> <li>Returns a copy of the <code>font_desr</code>, <code>f</code>, with the given font slant. Returns    instance of <code>font_descr</code>.</li> <li>Returns a copy of the <code>font_desr</code>, <code>f</code>, with the given font stretch.    Returns instance of <code>font_descr</code>.</li> <li>Direct access to members.</li> </ol> <p>:point_right: The syntax allows for concatenation. For example: <pre><code>font_descr{ \"Open Sans\", 14 }.bold().italic()\n</code></pre></p>"},{"location":"artist/foundation/#font","title":"font","text":"<p>The font loads a system or application font given a font descriptor.</p> <pre><code>class font\n{\npublic:\nfont();\nfont(font_descr descr);\nfont(font const&amp; rhs);\nfont(font&amp;&amp; rhs) noexcept;\n~font();\nfont&amp;                operator=(font const&amp; rhs);\nfont&amp;                operator=(font&amp;&amp; rhs) noexcept;\nexplicit             operator bool() const;\nfont_impl_ptr        impl() const;\nstruct metrics_info\n{\nfloat             ascent;\nfloat             descent;\nfloat             leading;\n};\nmetrics_info         metrics() const;\nfloat                line_height() const;\nfloat                measure_text(std::string_view str) const;\n};\n</code></pre>"},{"location":"artist/foundation/#expressions_5","title":"Expressions","text":"<pre><code>// Default constructor [1].\nfont{}\n// Constructor [2].\nfont{ fd }\n// Copy constructor. [3]\nfont{ f }\n// Assignment [4]\nf = f2\n// Validity Check [5]\nbool(f)\n// Access to font handle [6]\nf.impl()\n// Font metrics [7]\nf.metrics()\nf.line_height()\n// Measuring text [8]\nf.measure_text(str)\n</code></pre>"},{"location":"artist/foundation/#notation_5","title":"Notation","text":"<p>| <code>fd</code>         | Instance of <code>font_descr</code>       | | <code>f</code>          | Instance of <code>font</code>             | | <code>str</code>        | Instance of <code>std::string_view</code> |</p>"},{"location":"artist/foundation/#semantics_14","title":"Semantics","text":"<ol> <li>Default construct a <code>font</code>. The default constructed font is invalid.</li> <li>Construct a <code>point</code> given a font descriptor <code>font_descr</code>, <code>fd</code>.</li> <li>Copy construct a <code>font</code>, <code>f</code>.</li> <li>Assign <code>f2</code>, to <code>f</code>.</li> <li>Check if a <code>f</code> is valid. Returns <code>true</code> if <code>f</code> is valid.</li> <li>Get the backend-specific font handle.</li> <li>Get the font metrics (<code>ascent</code>, <code>descent</code>, <code>leading</code> and the    <code>line_height</code>).<ul> <li><code>f.metrics()</code> returns an instance of <code>font::metrics_info</code>.</li> <li><code>f.line_height()</code> returns a scalar value.</li> </ul> </li> <li>Measure the length the given string, <code>str</code>, will occupy when drawn using    the font <code>f</code>. This does not take into account the <code>canvas</code>' transformation    matrix. Returns a scalar value.</li> </ol>"},{"location":"artist/foundation/#resources","title":"resources","text":"<p>Resources (e.g. images) that are identified by file names can be absolute or relative paths. For relative paths, a vector of paths is searched, in the order they appear in the vector. Platform code provides the initial paths as appropriate. Applications may add additional paths as needed, using the add_search_path function. search_first=true puts the path at the top of the vector and will be searched first.</p> <pre><code>void        add_search_path(fs::path const&amp; path, bool search_first = false);\nfs::path    find_file(fs::path const&amp; file);\nfs::path    app_data_path();\n</code></pre>"},{"location":"artist/foundation/#expressions_6","title":"Expressions","text":"<pre><code>// Add a search path [1]\nadd_search_path(path)\nadd_search_path(path, true)\n// Search for a file [2]\nfind_file(path)\n</code></pre>"},{"location":"artist/foundation/#notation_6","title":"Notation","text":"<p>| <code>path</code>       | Instance of <code>std::filesystem::path</code>   |</p>"},{"location":"artist/foundation/#semantics_15","title":"Semantics","text":"<ol> <li>Add a directory search path. This path, and all paths added via    <code>add_search_path</code>,  will be used when searching for a resource file. The    second variant, with the second argument, specifies if the directory    search path will be pushed into the end (default <code>false</code>) or pushed to the    front (second argument is <code>true</code>) of the list. If <code>true</code>, the directory    search path will be searched first.</li> <li>Find a resource file by searching the list of directory search paths.    Returns an empty path if file is not found. returns an instance of    <code>std::filesystem::path</code>.</li> </ol>"},{"location":"artist/gallery/","title":"Gallery","text":"<p>It\u2019s always a nice to have some pretty pictures. Click to zoom into high-resolution (HiDPI) img or play the video clips.</p> <p> </p>"},{"location":"artist/setup/","title":"Setup and Installation","text":""},{"location":"artist/setup/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Requirements</li> <li>MacOS Installation</li> <li>Windows Installation</li> <li>Linux Installation</li> <li>Building and Running the examples</li> </ul>"},{"location":"artist/setup/#requirements","title":"Requirements","text":"<p>Here are the basic requirements and dependencies that you need to satisfy in order to use the library:</p> <ol> <li>A C++17 compiler</li> <li>Git</li> <li>CMake 3.9.6 or higher</li> <li>GTK3 (See note 4)</li> </ol> <p>On the MacOS, if the backend is Quartz-2D (default build) there are no additional dependencies.</p> <p>If the backend is Skia, using the cmake option <code>ARTIST_SKIA=ON</code>, there are additional requirements and dependencies:</p> <ol> <li>Skia (See note 1)</li> <li>HarfBuzz (See note 2)</li> <li>libunibreak (See note 2)</li> <li>OpenGL (See note 3)</li> <li>fontconfig (See note 2)</li> </ol>"},{"location":"artist/setup/#notes","title":"Notes:","text":"<ol> <li>No setup required. Platform specific binary automatically downloaded by    cmake.</li> <li>On Linux, this library is a required dependency that needs to be installed    via apt-get. Otherwise, no setup required. Platform specific binary    automatically downloaded by cmake.</li> <li>This library is a required dependency that needs to be installed.</li> <li>Linux only. This library is a required dependency that needs to be    installed.</li> </ol> <p>Additionally, the following library is dragged as a submodule:</p> <ol> <li>The Cycfi infra library</li> </ol> <p>Infra provides some basic groundwork common to Cycfi libraries, including Artist.</p>"},{"location":"artist/setup/#c17","title":"C++17","text":"<p>Artist currently supports the MacOS, Windows and Linux. In the Mac, we support both XCode and CLion IDEs. Artist is tested with XCode 10 and XCode 11. In Windows, we support Windows 10 with Visual Studio 2019, although it will probably also work with older versions of the Visual Studio IDE. In Linux, we support both Clang and g++. Get the latest version with a C++17 compiler.</p>"},{"location":"artist/setup/#git","title":"Git","text":"<p>Artist 2D Canvas Library, plus the Cycfi Infra library:</p> <pre><code>git clone --recurse-submodules https://github.com/cycfi/artist.git\n</code></pre>"},{"location":"artist/setup/#cmake","title":"CMake","text":"<p>Make sure you have CMake 3.7.2 or higher. Follow the installation procedure for your platform, or follow the instructions below for specific environments.</p>"},{"location":"artist/setup/#macos","title":"MacOS","text":"<p>Optional: If the desired backend is Skia, using the cmake option <code>-DARTIST_SKIA=ON</code>, install required libraries using Homebrew:</p> <pre><code>brew install fontconfig\n</code></pre> <p>The MacOS port is configured to have cmake download Skia, precompiled, as needed, so there is no need to have the library manually installed. CMake will take care of downloading and setting up dependencies.</p>"},{"location":"artist/setup/#install-cmake","title":"Install CMake","text":"<pre><code>brew install cmake\n</code></pre>"},{"location":"artist/setup/#generating-the-project-using-cmake","title":"Generating the Project using CMake","text":"<p>There are multiple ways to generate a project file using CMake depending on your platform and desired IDE, but here are some examples for the MacOS:</p>"},{"location":"artist/setup/#using-xcode","title":"Using XCode","text":"<ol> <li>CD to the artist library.</li> <li>Make a build directory inside the artist directory.</li> <li>CD to the build directory.</li> <li>invoke cmake.</li> </ol> <pre><code>cd artist\nmkdir build\ncd build\ncmake -GXcode ../\n</code></pre> <p>Optional: If the desired backend is Skia, use the cmake option <code>-DARTIST_SKIA=ON</code>:</p> <pre><code>cmake -GXcode -DARTIST_SKIA=ON ../\n</code></pre> <p>By default, the backend on MacOS is Quartz-2D.</p> <p>If successful, cmake will generate an XCode project in the build directory. Open the project file artist.xcodeproj and build all. You should see a couple of example applications.</p>"},{"location":"artist/setup/#using-clion","title":"Using CLion","text":"<p>Simply open the CMakeLists.txt file using CLion and build the project.</p> <p>Optional: If the desired backend is Skia, use the cmake option <code>ARTIST_SKIA=ON</code>. This option can be set in Preferences-&gt;Build, Execution, Deployment-&gt;CMake-&gt;CMake Options.</p>"},{"location":"artist/setup/#windows","title":"Windows","text":""},{"location":"artist/setup/#install-required-libraries","title":"Install required libraries","text":"<p>The Windows port is configured to have cmake download all the required libraries, precompiled, so there is no need to have these libraries manually installed. CMake will take care of downloading and setting up dependencies.</p>"},{"location":"artist/setup/#install-cmake_1","title":"Install CMake","text":"<p>Follow the instructions provided here: https://cmake.org/install/</p>"},{"location":"artist/setup/#generating-the-project-using-cmake_1","title":"Generating the Project using CMake","text":"<p>Assuming you have Visual Studio 2019 installed.</p>"},{"location":"artist/setup/#visual-studio-2019-gui","title":"Visual Studio 2019 GUI","text":"<ol> <li>CD to the artist library.</li> <li>Make a build directory inside the artist directory.</li> <li>CD to the build directory.</li> <li>invoke cmake.</li> </ol> <pre><code>cd artist\nmkdir build\ncd build\ncmake -G\"Visual Studio 16 2019\" ..//\n</code></pre> <p>If successful, cmake will generate a Visual Studio solution in the build directory. Open the project file artist.sln and build all (or invoke <code>nmake</code>). You should see a couple of example applications.</p>"},{"location":"artist/setup/#nmake","title":"NMake","text":"<p>If you prefer to use the command-line, you may use the <code>-G\"NMake Makefiles\"</code> generator, instead.</p> <ol> <li>Open a Command Prompt for VS 2019 ({x64/x86-64} {Native/Cross} Tools Command Prompt for VS 2019) in your start menu.</li> <li>CD to the artist library.</li> <li>Make a build directory inside the artist directory.</li> <li>CD to the build directory.</li> <li>invoke cmake.</li> </ol> <pre><code>cd artist\nmkdir build\ncd build\ncmake -G\"NMake Makefiles\" ..//\n</code></pre> <p>If successful, cmake will generate NMake Make files in the build directory. Invoke <code>nmake</code> to build the binary.</p>"},{"location":"artist/setup/#linux","title":"Linux","text":""},{"location":"artist/setup/#install-required-libraries_1","title":"Install required libraries","text":"<p>On Debian and derived distributions using apt-get (requires <code>sudo</code>):</p> <pre><code>sudo apt-get install libharfbuzz-dev\nsudo apt-get install libunibreak-dev\nsudo apt-get install fontconfig\nsudo apt-get install libgtkglext1-dev\nsudo apt-get install libgtk-3-dev\n</code></pre> <p>The Linux port is configured to have cmake download Skia, precompiled, as needed, so there is no need to have the library manually installed. CMake will take care of downloading and setting up dependencies.</p>"},{"location":"artist/setup/#install-cmake_2","title":"Install CMake","text":"<pre><code>sudo apt-get -y install cmake\n</code></pre>"},{"location":"artist/setup/#generating-the-project-using-cmake_2","title":"Generating the Project using CMake","text":"<p>There are multiple ways to generate a project file using CMake depending on your platform and desired IDE, but here are some examples for Linux:</p>"},{"location":"artist/setup/#using-unix-makefiles","title":"Using UNIX makefiles","text":"<ol> <li>CD to the artist library.</li> <li>Make a build directory inside the artist directory.</li> <li>CD to the build directory.</li> <li>invoke cmake.</li> </ol> <pre><code>cd artist\nmkdir build\ncd build\ncmake -G \"Unix Makefiles\" ../\n</code></pre> <p>If successful, cmake will generate Unix Make files in the build directory.</p>"},{"location":"artist/setup/#using-clion_1","title":"Using CLion","text":"<p>Simply open the CMakeLists.txt file using CLion and build the project.</p>"},{"location":"artist/setup/#building-and-running-the-examples","title":"Building and Running the examples","text":"<p>If successful, cmake will generate a project file or makefiles in the build directory. Build the library and example programs using the generated makefiles or open the project file using your IDE and build all.</p> <p>You should see a couple of example applications in there that you can run. These examples are provided as starting points to get you up to speed in learning how to use the library. For simplicity, each example is contained in a single source file, plus specific platform-specific drivers for setting up the library on different OSes for the backend 2D graphics library. These drivers are single .cpp file (or .mm file for MacOS) that contains the minimal code for setting up the application and a single window for viewing the graphics.</p> <p>Feel free to inspect and mess with the examples. Each example demonstrates different aspects of the Artist library.</p>"},{"location":"elements/","title":"Elements C++ GUI library","text":""},{"location":"elements/#introduction","title":"Introduction","text":"<p>Elements is a lightweight, fine-grained, resolution independent, modular GUI library. Elements is designed with these requirements in mind:</p> <ol> <li>It should be open source with a liberal, non-viral license.</li> <li>It should be usable in any application and should play well with other GUI    libraries and frameworks.</li> <li>Corollary to the second requirement is that it can also be used to develop    plugins. It should not own the event loop and should be able to co-exist    with components within a plugin host such as VST and AU.</li> <li>It should be resolution independent and allow for HDPI displays.</li> <li>Should not rely on a \u201cvisual\u201d GUI editor or code generator.</li> <li>It should have a declarative API using modern C++. Declarative C++ code    tells you what rather than how (imperative). The GUI should be    declared in C++ code.</li> </ol> <p>Elements, is extremely lightweight\u2026 and modular. You compose very fine-grained, flyweight \u201celements\u201d to form deep element hierarchies using a declarative interface with heavy emphasis on reuse.</p>"},{"location":"elements/#documentation","title":"Documentation","text":"<ol> <li>Gallery</li> <li>Setup and Installation</li> <li>Design Aspects</li> <li>Layout</li> </ol> <p>The Elements C++ GUI library is cross-platform. Elements currently supports the MacOS, Windows and Linux. Follow the Setup and Installation guide to get started using the library.</p>"},{"location":"elements/about/","title":"History","text":"<p>HDPI Matters. Zoom in and notice the standard DPI icons at the top    (e.g. the Power Button from the VST3 Plug-in Test Host), vs. Elements\u2019    vector dials.</p> <p>Sometime in 2014, I started searching for a GUI library I can use for some of the projects I am developing. The most important requirements to me were:</p> <ol> <li>It should be open source with a liberal, non-viral license.</li> <li>It should be usable in any application and should play well with other GUI    libraries and frameworks.</li> <li>Corollary to the second requirement is that it can also be used    to develop plugins (e.g. it should not own the event loop and can co-exist    with elements within a plugin host such as VST and AU.</li> <li>It should be resolution independent and allows for HDPI displays.</li> </ol> <p>I tried hard to find something that satisfies these requirements. I failed. I did not find any. JUCE comes close, but it did not satisfy the first requirement. iPlug is usable. I actually prototyped some plugins using it, but it did not satisfy the 4th requirement. I\u2019m also unsure if it satisfies the 2nd requirement.</p> <p>There are other requirements, such as not relying on a \u201cvisual\u201d GUI editor or code generator. IMO, the GUI should be declared in the code. Obviously, good design and architecture is also another requirement. Most GUI C++ libraries are just too 90s for me to consider. None of that crappy OOP bleh! But, hey, I am digressing! The truth is, I am even willing to use a library with a pure C interface, such as GLFW, as long as it is well designed (GLFW is simple and clean) and can be wrapped in C++ anyway. I also tried to use NanoVG \u2014 not really a GUI library, but it makes it easier to write one (NanoVG inspired Elements\u2019 Cairo based vector graphics canvas).</p> <p>I know that perfect is the enemy of the good, but I just can\u2019t resist it. I couldn\u2019t stand it anymore. So at around 2016, I decided to write my own. Actually, I did not start from scratch. I had a head start: I\u2019ve been writing GUI libraries since the 90s. One of the main projects I got involved with when I was working in Japan in the 90s was a lightweight GUI library named Pica. So I went ahead, dusted off the old code and rewrote it from the ground up using modern C++.</p>"},{"location":"elements/about/#flyweight","title":"Flyweight","text":"<p>Elements, is very lightweight\u2026 and extremely modular. You compose very fine-grained, flyweight \u201celements\u201d to form deep element hierarchies using a declarative interface with heavy emphasis on reuse. A specific example should make it clear. Here\u2019s the standard message box (included in elements\u2019 gallery a collection of reusable element compositions):</p> <pre><code>inline auto message_box1(\nchar const* message\n, std::uint32_t icon_id\n, char const* ok_text = \"OK\"\n, size size_ = get_theme().message_box_size\n, color ok_color = get_theme().indicator_color\n)\n{\nauto textbox = static_text_box{ message };\nauto ok_button = share(button(ok_text, 1.0, ok_color));\nauto popup = share(\nkey_intercept(align_center_middle(\nfixed_size(size_,\nlayer(\nmargin({ 20, 20, 20, 20 },\nvtile(\nhtile(\nalign_top(icon{ icon_id, 2.5 }),\nleft_margin(20, std::move(textbox))\n),\nalign_right(hsize(100, hold(ok_button)))\n)\n),\npanel{}\n)))));\npopup-&gt;on_key =\n[ok_ = get(ok_button)](auto k)\n{\nif (k.key == key_code::enter)\n{\nif (auto ok = ok_.lock())\nok-&gt;value(true);\nreturn true;\n}\nreturn false;\n};\nreturn std::pair{ ok_button, popup };\n}\n</code></pre> <p>The client uses the gallery code above like this:</p> <pre><code>void quantum_bs(view&amp; view_)\n{\nchar const* alert_text =\n\"We are being called to explore the cosmos itself as an \"\n\"interface between will and energy. It is a sign of things \"\n\"to come. The dreamtime is approaching a tipping point.\"\n;\nauto [ok_button, popup] = message_box1(alert_text, icons::attention);\nview_.add(popup);\nok_button-&gt;on_click =\n[](bool state)\n{\n// Do something here when the button is clicked\n};\n}\n</code></pre> <p></p> <p>Some quick highlights, beyond the obvious:</p> <ul> <li><code>share</code>: This element is supposed to be shared (using std::shared_ptr).    E.g. when returned from functions like this one. Typically you\u2019d want to share    elements that you need to have access to elsewhere in your code.</li> <li><code>hold</code>: Hold a shared element somewhere in a view hierarchy.</li> <li><code>key_intercept</code>: A delegate element that intercepts key-presses.</li> <li><code>fixed_size</code>: An element that fixes the size of its contained element    (Elements are extremely lightweight, and typically, do not even have sizes    nor know their positions in the view hierarchy).</li> <li><code>margin</code>, <code>left_margin</code>: Two of the many margins, including <code>right_margin</code>,    <code>top_margin</code>, etc., adds some padding, <code>margin</code> in this case 20 pixels all    around the contained element, while <code>left_margin</code> adds a padding of 20 to    separate the icon and the text box.</li> <li><code>layer</code>: Element composites that place elements in multiple layers.</li> <li><code>panel</code>: A simple window-like panel box.</li> <li><code>vtile</code>, <code>htile</code>: Fluid vertical and horizontal layout elements that allocate    enough space for their contained elements allowing for \u2018stretchiness\u2019    (the ability of elements to stretch within a defined minimum and maximum size    limits; elements can have infinite sizes) as well as fixed sizing and vertical    and horizontal alignment (0% to 100%). Vertical and horizontal tiles are used    all over the place to place elements in a grid.</li> <li><code>align_top</code>, <code>align_right</code>, <code>align_center_middle</code>: Aligns its element to the    top, right, and center (horizontally) middle (vertically), respectively.    Like the margins, we have a lot of these align elements.</li> <li><code>on_key</code>: Attaches a call-back (lambda) function to the key_intercept element    (strategically placed in the outermost level), to send a value of true to the    ok_button, essentially programmatically clicking it when the user presses    the enter key.</li> <li><code>get</code>: To avoid <code>shared_ptr</code> cycles, we use a <code>weak_pointer</code>, via the get    function. We\u2019ll need to \u201clock\u201d this to get the actual shared pointer later    in the callback.</li> </ul> <p>Modularity and reuse are two of the most important design aspects. For example, the button element is actually composed of even smaller elements. Here\u2019s part of the code responsible for making the buttons above (also in the gallery):</p> <pre><code>auto constexpr button_margin = rect{ 10, 5, 10, 5 };\ntemplate &lt;typename Button&gt;\ninline Button make_button(\nstd::string const&amp; text\n, float size = 1.0\n, color body_color = get_theme().default_button_color\n)\n{\nreturn make_button&lt;Button&gt;(\nmargin(\nbutton_margin,\nalign_center(label(text, size))\n),\nbody_color\n);\n}\n</code></pre> <p>After a while, code reuse, using a palette of fine-grained elements, becomes very familiar and intuitive, much like using HTML. The declarative C++ code tells you what rather than how (imperative).</p> <p>And, as promised, the elements are very fine grained. Here\u2019s the actual button class we are using here:</p> <pre><code>class layered_button : public array_composite&lt;2, deck_element&gt;\n{\npublic:\nusing base_type = array_composite&lt;2, deck_element&gt;;\nusing button_function = std::function&lt;void(bool)&gt;;\nusing base_type::value;\ntemplate &lt;typename W1, typename W2&gt;\nlayered_button(W1&amp;&amp; off, W2&amp;&amp; on);\nvirtual element*  hit_test(context const&amp; ctx, point p) override;\nvirtual element*  click(context const&amp; ctx, mouse_button btn) override;\nvirtual void      drag(context const&amp; ctx, mouse_button btn) override;\nvirtual bool      is_control() const override;\nvirtual void      value(int new_state) override;\nvirtual void      value(bool new_state) override;\nbool              value() const;\nbutton_function   on_click;\nprotected:\nbool              state(bool new_state);\nprivate:\nbool              _state;\n};\n</code></pre> <p>The layered button is a type of button that basically has two states: pushed and un-pushed. It does not know how to draw the two states. Rather, it delegates the states to two elements, composed as a 2-layer composite element, using the deck element. The class itself has nothing more than a single(!) member variable _state. That\u2019s it! And talking about flexibility, the deck is generic and may contain any kind of element, or even your own custom drawable element. Here\u2019s an example of a custom element that draws an infinitely resizable filled round-rectangle:</p> <pre><code>auto box = min_size({ 5, 5 },\nbasic(\n[](context const&amp; ctx)\n{\nauto&amp; c = ctx.canvas;\nc.begin_path();\nc.round_rect(ctx.bounds, 4);\nc.fill_style(colors::gold.opacity(0.8));\nc.fill();\n}\n)\n);\n</code></pre> <p>Elements has its own HTML5 inspired canvas drawing engine using Cairo underneath.</p>"},{"location":"elements/about/#for-now","title":"For now...","text":"<p>There\u2019s obviously still a lot to cover, but for now, this quick tour of Elements should suffice. Is it ready yet? Is it usable? Well, I am already using it, at least for the MacOS, which is my preferred development system. I am using it in the Ascend project. But, I have to be honest. While it is usable, and based on very solid architecture and design, there is still a lot of work to do.</p> <p>And so that being said, if anyone out there, familiar with modern C++ (esp. C++14 and C++17), finds this brief introduction compelling enough, I would very much welcome some help. Hey, this is Open Source. The license will remain permissive and liberal (currently MIT). Send me an email! joel-at-cycfi-dot-com.</p>"},{"location":"elements/aspects/","title":"Design Aspects","text":""},{"location":"elements/aspects/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Minimal Example</li> <li>App and Window</li> <li>Background</li> <li>Aligns and Sizes</li> <li>Labels, Margins and Layers</li> <li>Let's Make a Button</li> <li>Sliders too!</li> </ul> <p>This document explains the three key design aspects behind Elements through examples. The Elements C++ GUI library is:</p> <p>Modular: Elements is very lightweight and extremely modular. You compose very fine-grained, flyweight \"elements\" to form deep element hierarchies using a declarative interface with heavy emphasis on reuse.</p> <p>Declarative: Elements exposes a declarative API using modern C++. Declarative C++ code tells you what rather than how (imperative, i.e. control flow). There are no code generators. The GUI is declared entirely in C++ code. After a while, code reuse, using a palette of fine-grained elements, becomes very familiar and intuitive, much like using HTML.</p> <p>Interoperable: Elements is usable in any application and plays well with other GUI libraries and frameworks. The library is loosely coupled with the application and windowing system and can co-exist with components within a host. It should be easy to integrate Elements with any existing application.</p>"},{"location":"elements/aspects/#minimal-example","title":"Minimal Example","text":"<p>Specific examples should make it clear. Let's start with a basic window with a dark grey background. Actually, this is the same as the 'empty' example provided in the \u2018examples\u2019 directory: https://github.com/cycfi/elements/tree/master/examples/empty</p> <p>The examples presented here can be found in this link: https://github.com/cycfi/elements/tree/master/examples/doc_aspects</p> <pre><code>#include &lt;elements.hpp&gt;\nusing namespace cycfi::elements;\n// Main window background color\nauto constexpr bkd_color = rgba(35, 35, 37, 255);\nauto background = box(bkd_color);\nint main(int argc, const char* argv[])\n{\napp _app(argc, argv);\nwindow _win(_app.name());\n_win.on_close = [&amp;_app]() { _app.stop(); };\nview view_(_win);\nview_.content(\nbackground\n);\n_app.run();\nreturn 0;\n}\n</code></pre>"},{"location":"elements/aspects/#app-and-window","title":"App and Window","text":"<p>Here, we create an <code>app</code> and a <code>window</code>, and set the window's <code>on_close</code> to <code>stop</code> (quit) the application. <code>_win.on_close</code> is called when the window is closed by the user, thereby quitting the application.</p> <p>Like any other GUI library or framework, the <code>app</code> manages the main event loop, while the <code>window</code> manages application windows. However, take note that the <code>app</code> and the <code>window</code> classes are optional. There are certain situations, like e.g. building plugins or incorporating Elements in another framework such as QT, where you do not want Elements to manage the event loop or windows. The important class of interest here is the <code>view</code>. In these cases, you want to embed the <code>view</code> directly. You can directly construct a <code>view</code> given a platform window (or widget), as its main <code>content</code> view or child window (or widget).</p> <p>The <code>view</code> does not know anything about drawing or user interaction. Instead, it relies on its client supplied <code>content</code> to do these. Without any <code>content</code>, it is an empty shell. And so this is where it starts to get interesting. The content of the <code>view</code> typically contains multiple layers, much like typical graphics applications. In this example, we only have one layer: the <code>background</code>.</p>"},{"location":"elements/aspects/#background","title":"Background","text":"<pre><code>auto background = box(bkd_color);\n</code></pre> <p>It is a simple, infinitely resizable <code>box</code> with the specified color: <code>rgba(35, 35, 37, 255)</code>. It will resize automatically when the window is resized. We set it as the view's content:</p> <pre><code>view_.content(\nbackground\n);\n</code></pre> <p>Running this example, you get:</p> <p>{: width=\"60%\" }</p>"},{"location":"elements/aspects/#aligns-and-sizes","title":"Aligns and Sizes","text":"<p>Now let's add a blue round rectangle. We've seen how to create a box: the background using <code>box</code>, passing in a color. A rounded box is created using <code>rbox</code>, passing in the color and the corner radius:</p> <pre><code>auto blue_rbox = rbox(colors::medium_blue, 10);\n</code></pre> <p>The color, this time, is specified by name from the <code>colors</code> namespace. The namespace includes all predefined colors from the standard HTML Color Names.</p> <p>We can actually use <code>blue_rbox</code> already, as-is, by placing it in another layer in the view:</p> <pre><code>view_.content(\nblue_rbox,\nbackground\n);\n</code></pre> <p>But like the <code>box</code>, the <code>rbox</code> is infinitely resizable and will hog the entire window. What we want is to give it a specific size and center it in the window. Elements are very lightweight. Most elements do not even have a size, nor know their position in the view (elements without position information are inherently relocatable \u2014they can be placed anywhere; the position is supplied at rendering time).</p> <p>So we give it a 100x50 size by wrapping it in the <code>fixed_size</code> element:</p> <pre><code>auto blue_rbox =\nfixed_size(\n{ 100, 50 },\nrbox(colors::medium_blue, 10)\n);\n</code></pre> <p>And then we align it centered (in the x axis) and middle (in the Y axis) using the <code>align_center_middle</code> element:</p> <pre><code>auto blue_rbox =\nalign_center_middle(\nfixed_size(\n{ 100, 50 },\nrbox(colors::medium_blue, 10)\n)\n);\n</code></pre> <p>Without the alignment element, the main window would have been constrained to a fixed 100x50 size. There's a multitude of alignment elements available.</p> <p>So now, we are seeing how fine-grained elements are composed. The <code>rbox</code> is placed inside the <code>fixed_size</code> element which is then placed inside a <code>align_center_middle</code> element.</p> <p>Let's run this example:</p> <p>{: width=\"60%\" }</p>"},{"location":"elements/aspects/#labels-margins-and-layers","title":"Labels, Margins and Layers","text":"<p>Our goal this time is to place some text inside the blue box. The element we will use is the <code>label</code>. Most elements do not have a size, but as an exception, labels (simple text elements) do. So, instead of fixing the size of the box using <code>fixed_size</code>, we place the label alongside the box in a <code>layer</code> element, but add some margin around the label. Here's how you do it:</p> <pre><code>auto blue_rbox =\nalign_center_middle(\nlayer(\nmargin(\n{ 25, 20, 25, 18 },\nlabel(\"\u201cDogs are my favorite people\u201d\")\n),\nrbox(colors::medium_blue, 10)\n)\n);\n</code></pre> <p>If it's not obvious yet, let's take it apart into its constituent pieces:</p> <p>Step 1: We make a label:</p> <pre><code>label(\"\u201cDogs are my favorite people\u201d\")\n</code></pre> <p>Step 2: We add margin around it:</p> <pre><code>margin(\n{ 25, 20, 25, 18 },\nlabel(\"\u201cDogs are my favorite people\u201d\")\n)\n</code></pre> <p>Note that like the align elements, there's a multitude of margins such as <code>left_margin</code>, <code>right_margin</code>, etc.</p> <p>Step 3: We make a blue rounded box:</p> <pre><code>rbox(colors::medium_blue, 10)\n</code></pre> <p>Step 4: We place the label and the blue rounded box as siblings in a <code>layer</code> element:</p> <pre><code>layer(\nmargin(\n{ 25, 20, 25, 18 },\nlabel(\"\u201cDogs are my favorite people\u201d\")\n),\nrbox(colors::medium_blue, 10)\n)\n</code></pre> <p>Step 4: Then finally, we place it in the <code>align_center_middle</code> element.</p> <p>Tip: If the element hierarchy gets a bit too deep, use the c++ <code>auto</code> to name sub-parts of the element composition to make it easier to understand.</p> <p>The <code>layer</code> element is a composite element that holds zero or more 'child' elements. Some of you might have noticed that we already mentioned the <code>layer</code> element before when we were discussing the view's content in the App and Window section: \"The content of the <code>view</code> typically contains multiple layers, much like typical graphics applications\". Well, actually, this is the same <code>layer</code> thing here. The view's main content is a <code>layer</code> element.</p> <p>So now we have:</p> <p>{: width=\"60%\" }</p>"},{"location":"elements/aspects/#lets-make-a-button","title":"Let's Make a Button","text":"<p>To demonstrate the fine-grained and modular nature of Elements, it is perhaps illustrative to say that even the button element is not atomic and is actually composed of smaller parts. In this section, we will see how one creates a button from the basic parts that we have dealt with in the previous sections.</p> <p>Take note that this example is only for illustrative purposes. The library provides easier ways to make buttons.</p> <p>A button is composed of two elements that represent its 1) normal and 2) pushed states. The basic concept here is that things like buttons do not know how to render themselves, but instead delegate that task to its subjects. The button takes care of the basic logic behind the the control, including user interaction and interface with the application via <code>on_click</code> callbacks, but delegates rendering to two external elements. We'll see shortly how that works.</p> <p>So we need two elements. Let's reuse the <code>blue_rbox</code> we wrote before. We need two, so this time, we will make a function that takes in a color and returns a button. Hence, we differentiate the two button states (normal and pushed) by the color.</p> <pre><code>auto btn_rbox(color c)\n{\nreturn\nlayer(\nmargin(\n{ 25, 20, 25, 18 },\nlabel(\"\u201cDogs are my favorite people\u201d\")\n),\nrbox(c, 10)\n);\n}\n</code></pre> <p>Same as before, but with color options. Now, we have another function that creates the button for us:</p> <pre><code>auto make_button()\n{\nreturn layered_button(\nbtn_rbox(colors::medium_blue),            // Normal state\nbtn_rbox(colors::medium_blue.level(0.8))  // Pushed state\n);\n}\n</code></pre> <p>We have the normal state in medium_blue, and the pushed state, still medium_blue but with the level down by 0.8 (darker).</p> <p>And... that's it! Now we have a function that makes our button. We can now place this button in our view. Of course, like before, we keep in mind that we want to center the button:</p> <pre><code>   view_.content(\nalign_center_middle(make_button()),\nbackground\n);\n</code></pre> <p>And here it is in action:</p> <p>Oh, hey, Elements has a gallery \u2014a collection of reusable element compositions, just like what we did above, but more refined. That gallery is constantly growing. The possibilities are endless. Composing elements is fun!</p>"},{"location":"elements/aspects/#sliders-too","title":"Sliders too!","text":"<p>Guess what, we can make funny sliders too, using the same components we made in the previous sections!</p> <p>Here's the code:</p> <pre><code>auto track = hsize(10, box(colors::black));\nauto thumb =\nlayer(\nmargin(\n{ 25, 20, 25, 18 },\nlabel(\"\u201cDogs are my favorite people\u201d\")\n),\nrbox(colors::medium_blue, 10)\n);\nauto funny_slider = slider(thumb, track);\n</code></pre> <p>Notice the pattern? It's the same consistent way of composing and assembling parts. Start with smaller parts. Use them to build ever more complex parts. The <code>slider</code> has two parts: the <code>track</code> and the <code>thumb</code>. Here, we made a simple track using the same old box. We made it black. Then, we reused the same \u201cDogs are my favorite people\u201d button for the thumb. The result looks silly, I should say :blush:, but hey, we are trying to make a point!</p> <p>Again, take note that this example is only for illustrative purposes. The library provides easier, (but less funny :grin:) ways to make sliders.</p> <p>Now, like before, we add our funny slider to our view:</p> <pre><code>   view_.content(\nalign_center(funny_slider),\nbackground\n);\n</code></pre> <p>But note that, in this case, we want to center the slider only horizontally, so we use <code>align_center</code> instead of <code>align_center_middle</code>.</p> <p>Ok, there you go! Now go and be creative and make your own controls!</p>"},{"location":"elements/context/","title":"Context","text":"<p>A majority of element's member functions require a drawing \"context\". The <code>context</code> class provides information such as the element's <code>bounds</code>, a rectangle that indicates where the element needs to be drawn. The <code>context</code> class inherits from the <code>basic_context</code>, a struct which contains a reference to the <code>view</code> \u2014the main content view inside a window where elements are placed, and a <code>canvas</code>, a drawing surface where the elements are drawn.</p> <p><pre><code>struct basic_context\n{\n/*...*/\nelements::view&amp;      view;\nelements::canvas&amp;    canvas;\n};\n</code></pre> The <code>context</code> class inherits from <code>basic_context</code> and additionally includes a pointer to the \"current\" element being drawn, a pointer to its parent element in the elements hierarchy (that which contains it), and the element's <code>bounds</code>, a rectangle that indicates where the element needs to be drawn.</p> <p>Only one <code>element</code> member function takes in a <code>basic_context</code> argument, the <code>limits</code> member function (more on that later). Other than that, all the other <code>element</code> member functions take in a <code>context</code> argument. The reason for this is that the at the point where the <code>limits</code> is called, the element's position and parent-child relationships in the elements hierarchy have not been established yet.</p> <pre><code>class context : public basic_context\n{\npublic:\n/*...*/\nelement*          element;\ncontext const*    parent;\nrect              bounds;\n};\n</code></pre>"},{"location":"elements/gallery/","title":"Gallery","text":"<p>It\u2019s always a nice to have some pretty pictures:</p> <p> </p>"},{"location":"elements/hosts/","title":"Hosts","text":"<p>In order to work in various systems, elements comes with different hosts options, each of which is set with the <code>ELEMENTS_HOST_UI_LIBRARY</code> macro in the build system setup. Currently the available hosts are:</p> <ul> <li><code>cocoa</code>:        used natively on macOS</li> <li><code>gtk</code>:          used as default choice on Linux</li> <li><code>win32</code>:        used natively on Windows</li> <li><code>experimental</code>: used for testing / development stages</li> </ul> <p>While <code>cocoa</code> and <code>win32</code> are used natively on the related platforms, <code>gtk</code> can be set also in more environments, for example using MinGW.</p> <p><code>experimental</code> is used only on edge cases to permit developers to use Elements in a new host development, and for this reason the use of it on production code is not supported.</p>"},{"location":"elements/layout/","title":"Layout","text":""},{"location":"elements/layout/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Limits</li> <li>Size Elements</li> <li>Stretch Elements</li> <li>Scale Element</li> <li>Align Elements</li> <li>Margin Elements</li> <li>Floating Element</li> <li>Tiles and Grids</li> <li>Horizontal Grids</li> <li>Horizontal Tiles</li> <li>Vertical Grids</li> <li>Vertical Tiles</li> <li>Layers</li> <li>Decks</li> <li>Flow Element</li> </ul> <p>The Elements Library provides a comprehensive set of elements for laying out elements in the view.</p>"},{"location":"elements/layout/#limits","title":"Limits","text":"<p>Each element provides information on how it wants to be sized by means of <code>min</code> and <code>max</code> limits: a hint that determine its actual extent and how it will be placed in the view depending on available window space. The element's <code>limits</code> member function determines the minimum and maximum extents of an element:</p> <pre><code>view_limits limits(basic_context const&amp; ctx) const;\n</code></pre> <p> See Context for information about <code>basic_context</code>. <code>view_limits</code> is a struct that gives us the <code>min</code> and <code>max</code> information:</p> <pre><code>struct view_limits\n{\npoint    min = { 0.0, 0.0 };\npoint    max = { full_extent, full_extent };\n};\n</code></pre> <p>For the purpose of this document, we will use these terms and expressions:</p> <p>limits : The limits of an element</p> <p>limits.min : The minimum limits of an element</p> <p>limits.min.x : The minimum horizontal limit of an element</p> <p>limits.min.y : The minimum vertical limit of an element</p> <p>limits.max : The maximum limits of an element</p> <p>limits.max.x : The maximum horizontal limit of an element</p> <p>limits.max.y : The maximum vertical limit of an element</p> <p>horizontal limits : (limits.min.x, limits.max.x)</p> <p>vertical limits : (limits.min.y, limits.max.y)</p> <p>minimum limits : (limits.min.x, limits.min.y)</p> <p>maximum limits : (limits.max.x, limits.max.y)</p> <p>minimum horizontal limit : limits.min.x</p> <p>maximum horizontal limit : limits.max.x</p> <p>minimum vertical limit : limits.min.y</p> <p>maximum vertical limit : limits.max.y</p> <p>By default, an element has full limits: it is infinitely resizable:</p> <pre><code>constexpr view_limits full_limits = {\n{ 0.0, 0.0 }\n, { full_extent, full_extent }\n};\n</code></pre> <p>An element with <code>full_limits</code> can be resized from an empty point (zero x and y size) up to the full extent of the screen, and beyond (if possible).</p> <p>:point_right: <code>full_extent</code> is actually an implementation defined huge number near the maximum limits of the coordinate's data type (also implementation defined).</p> <ul> <li> <p>An element has a fixed horizontal size if this expression is true:   <code>limits.min.x == limits.max.x</code>.</p> </li> <li> <p>An element has a fixed vertical size if this expression is true:   <code>limits.min.y == limits.max.y</code>.</p> </li> </ul>"},{"location":"elements/layout/#examples","title":"Examples","text":"<pre><code>{ { 100, 100 }, { 100, 100 } }; // Fixed size\n</code></pre> <pre><code>{ { 100, 100 }, { 100, full_extent } }; // Fixed width, flexible height\n</code></pre> <pre><code>{ { 100, 100 }, { 100, 200 } }; // Fixed width, semi-flexible height (100 to 200)\n</code></pre>"},{"location":"elements/layout/#size-elements","title":"Size Elements","text":"<p>Size elements override the limits of an enclosed element. There is a comprehensive list of size related elements in the Elements Library that can be used for various purposes. This section catalogues all the available size elements.</p>"},{"location":"elements/layout/#limit","title":"limit","text":"<p>Overrides the limits of an element.</p>"},{"location":"elements/layout/#expression","title":"Expression","text":"<pre><code>limit(limits, subject)\n</code></pre>"},{"location":"elements/layout/#notation","title":"Notation","text":"<p>| <code>limits</code>  | Instance of <code>view_limits</code>  | | <code>subject</code> | Instance of <code>Element</code>      |</p>"},{"location":"elements/layout/#semantics","title":"Semantics","text":"<ol> <li>The limits of <code>subject</code> will be set to the specified <code>limits</code>    constrained by the natural limits of the <code>subject</code> (the natural limits    of the element will not be violated).</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#fixed_size","title":"fixed_size","text":"<p>Fixes the size of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_1","title":"Expression","text":"<pre><code>fixed_size({ width, height }, subject)\n</code></pre>"},{"location":"elements/layout/#notation_1","title":"Notation","text":"<p>| <code>width</code>, <code>height</code>  | <code>float</code>               | | <code>subject</code>          | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_1","title":"Semantics","text":"<ol> <li><code>subject</code> will be laid out with a fixed <code>width</code> and <code>height</code>, constrained    by the natural limits of the <code>subject</code> (the natural limits of the    element will not be violated).</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#hsize","title":"hsize","text":"<p>Fixes the horizontal size of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_2","title":"Expression","text":"<pre><code>hsize(width, subject)\n</code></pre>"},{"location":"elements/layout/#notation_2","title":"Notation","text":"<p>| <code>width</code>      | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_2","title":"Semantics","text":"<ol> <li><code>subject</code> will be laid out with a fixed <code>width</code>, constrained by the    natural horizontal limits of the <code>subject</code> (the natural horizontal    limits of the element will not be violated).</li> <li>The natural vertical limits of <code>subject</code> will not be affected.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#vsize","title":"vsize","text":"<p>Fixes the vertical limits of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_3","title":"Expression","text":"<pre><code>vsize(height, subject)\n</code></pre>"},{"location":"elements/layout/#notation_3","title":"Notation","text":"<p>| <code>height</code>     | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_3","title":"Semantics","text":"<ol> <li><code>subject</code> will be laid out with a fixed <code>height</code>, constrained by the    natural vertical limits of the <code>subject</code> (the natural vertical limits    of the element will not be violated).</li> <li>The natural horizontal limits of <code>subject</code> will not be affected.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#min_size","title":"min_size","text":"<p>Overrides the minimum limits of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_4","title":"Expression","text":"<pre><code>min_size({ width, height }, subject)\n</code></pre>"},{"location":"elements/layout/#notation_4","title":"Notation","text":"<p>| <code>width</code>, <code>height</code>  | <code>float</code>               | | <code>subject</code>          | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_4","title":"Semantics","text":"<ol> <li>The minimum limits of <code>subject</code> will be set to the specified <code>width</code> and    <code>height</code>, constrained by the natural minimum limits of the <code>subject</code>.</li> <li>the natural minimum limits of the element will not be violated.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#hmin_size","title":"hmin_size","text":"<p>Overrides the minimum horizontal limit of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_5","title":"Expression","text":"<pre><code>hmin_size(width, subject)\n</code></pre>"},{"location":"elements/layout/#notation_5","title":"Notation","text":"<p>| <code>width</code>      | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_5","title":"Semantics","text":"<ol> <li>The minimum horizontal limit of <code>subject</code> will be set to the specified    <code>width</code> constrained by the natural horizontal minimum limits of the    <code>subject</code>.</li> <li>The natural horizontal minimum limits of the element will not be    violated.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#vmin_size","title":"vmin_size","text":"<p>Overrides the minimum vertical limit of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_6","title":"Expression","text":"<pre><code>vmin_size(height, subject)\n</code></pre>"},{"location":"elements/layout/#notation_6","title":"Notation","text":"<p>| <code>height</code>     | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_6","title":"Semantics","text":"<ol> <li>The minimum vertical limit of <code>subject</code> will be set to the specified <code>height</code>    constrained by the natural vertical minimum limits of the <code>subject</code>.</li> <li>The natural vertical minimum limits of the element will not be violated.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#max_size","title":"max_size","text":"<p>Overrides the maximum limits of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_7","title":"Expression","text":"<pre><code>max_size({ width, height }, subject)\n</code></pre>"},{"location":"elements/layout/#notation_7","title":"Notation","text":"<p>| <code>width</code>, <code>height</code>  | <code>float</code>               | | subject            | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_7","title":"Semantics","text":"<ol> <li>The maximum limits of <code>subject</code> will be set to the specified <code>width</code> and    <code>height</code>, constrained by the natural maximum limits of the <code>subject</code>.</li> <li>The natural maximum limits of the element will not be violated.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#hmax_size","title":"hmax_size","text":"<p>Overrides the maximum horizontal limit of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_8","title":"Expression","text":"<pre><code>hmax_size(width, subject)\n</code></pre>"},{"location":"elements/layout/#notation_8","title":"Notation","text":"<p>| <code>width</code>      | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_8","title":"Semantics","text":"<ol> <li>The maximum horizontal limit of <code>subject</code> will be set to the specified    <code>width</code> constrained by the natural maximum horizontal limit of the    <code>subject</code>.</li> <li>The natural maximum horizontal limit of the element will not be    violated.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#vmax_size","title":"vmax_size","text":"<p>Overrides the maximum vertical limit of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_9","title":"Expression","text":"<pre><code>vmax_size(height, subject)\n</code></pre>"},{"location":"elements/layout/#notation_9","title":"Notation","text":"<p>| <code>height</code>     | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_9","title":"Semantics","text":"<ol> <li>The maximum vertical limit of <code>subject</code> will be set to the specified    <code>height</code> constrained by the natural maximum vertical limit of the    <code>subject</code></li> <li>The natural maximum vertical limit of the element will not be violated.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#stretch-elements","title":"Stretch Elements","text":"<p>Resizable elements are elements with minimum limits that are less than the maximum limits in either x or y dimensions or both. Resizable elements can therefore stretch if there is extra available space allocated to it beyond its minimum limit. When two or more resizable elements are placed side by side in an htile or vtile, the element's \"stretchiness\" determines how much extra space is given to it. The element's \"stretchiness\" is determined by the element's <code>stretch</code> member function:</p> <pre><code>virtual view_stretch stretch() const;\n</code></pre> <p>where <code>view_stretch</code> is a struct declared as:</p> <pre><code>struct view_stretch\n{\nfloat    x = 1.0;\nfloat    y = 1.0;\n};\n</code></pre> <p>The <code>view_stretch</code> <code>x</code> and <code>y</code> members determine how much an element can stretch in the x or y dimensions. The default is 1.0. A stretchiness value of 2.0 means that the element is able to stretch twice as much compared to its siblings in an htile or vtile, assuming they have the default 1.0 stretchiness.</p>"},{"location":"elements/layout/#hstretch","title":"hstretch","text":"<p>Overrides the horizontal stretchiness of an an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_10","title":"Expression","text":"<pre><code>hstretch(stretch, subject)\n</code></pre>"},{"location":"elements/layout/#notation_10","title":"Notation","text":"<p>| <code>stretch</code>    | A scalar value        | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_10","title":"Semantics","text":"<ol> <li>The <code>subject</code> will assume the given <code>stretch</code> value.</li> <li>The stretch value has no effect to elements with fixed horizontal size.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol> <p>For example, the image below shows how three elements are laid out in an <code>htile</code>, with stretch values of <code>1.0</code>, <code>1.0</code> and <code>2.0</code>, respectively:</p> <p></p> <p>The element with the <code>2.0</code> stretch value stretches twice as much compared to its siblings.</p>"},{"location":"elements/layout/#vstretch","title":"vstretch","text":"<p>Overrides the vertical stretchiness of an an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_11","title":"Expression","text":"<pre><code>vstretch(stretch, subject)\n</code></pre>"},{"location":"elements/layout/#notation_11","title":"Notation","text":"<p>| <code>stretch</code>    | A scalar value        | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_11","title":"Semantics","text":"<ol> <li>The <code>subject</code> will assume the given <code>stretch</code> value.</li> <li>The stretch value has no effect to elements with fixed vertical limits.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol> <p>For example, the image below shows how three elements are laid out in an <code>htile</code>, with stretch values of <code>0.5</code>, <code>1.0</code> and <code>1.5</code>, respectively:</p> <p></p> <p>The element with the <code>0.5</code> stretch value stretches half less, while the element with the <code>1.5</code> stretches half more than the default.</p>"},{"location":"elements/layout/#scale-element","title":"Scale Element","text":"<p>The Elements Library is resolution independent and elements can be scaled up or down to suit. The default scale is 1.0 (no scale).</p>"},{"location":"elements/layout/#scale","title":"scale","text":"<p>The <code>scale</code> element changes the scale of its enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_12","title":"Expression","text":"<pre><code>scale(scale_, subject)\n</code></pre>"},{"location":"elements/layout/#notation_12","title":"Notation","text":"<p>| <code>scale_</code>     | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_12","title":"Semantics","text":"<ol> <li>The <code>subject</code> will scaled given the <code>scale_</code> value. A value &gt; 1.0 scales    the element up (zoom in), while a value &lt; 1.0 scales down (zoom out).</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align-elements","title":"Align Elements","text":"<p>An element can be aligned arbitrarily from 0.0 to 1.0 in either the x or y dimensions, or both. There is a comprehensive list of align elements in The Elements Library that can be used for various purposes. This section catalogues all the available align elements.</p>"},{"location":"elements/layout/#halign","title":"halign","text":"<p>Aligns the an enclosed element (<code>subject</code>) in the x-axis.</p>"},{"location":"elements/layout/#expression_13","title":"Expression","text":"<pre><code>halign(align, subject)\n</code></pre>"},{"location":"elements/layout/#notation_13","title":"Notation","text":"<p>| <code>align</code>      | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_13","title":"Semantics","text":"<ol> <li>Given a total allocated space <code>X</code>, <code>subject</code> will be positioned    horizontally to <code>X * align</code>.</li> <li>The <code>subject</code> will assume its minimum horizontal limit.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#examples_1","title":"Examples","text":"<ol> <li><code>halign(0.0) // align subject to the left</code></li> <li><code>halign(1.0) // align subject to the right</code></li> <li><code>halign(0.5) // align subject to the center</code></li> </ol>"},{"location":"elements/layout/#align_left","title":"align_left","text":"<p>Left-aligns the an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_14","title":"Expression","text":"<pre><code>align_left(subject)\n</code></pre>"},{"location":"elements/layout/#notation_14","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_14","title":"Semantics","text":"<ol> <li>Equivalent to <code>halign(0.0, subject)</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_center","title":"align_center","text":"<p>Center-aligns the an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_15","title":"Expression","text":"<pre><code>align_center(subject)\n</code></pre>"},{"location":"elements/layout/#notation_15","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_15","title":"Semantics","text":"<ol> <li>Equivalent to <code>halign(0.5, subject)</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_right","title":"align_right","text":"<p>Right-aligns the an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_16","title":"Expression","text":"<pre><code>align_right(subject)\n</code></pre>"},{"location":"elements/layout/#notation_16","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_16","title":"Semantics","text":"<ol> <li>Equivalent to <code>halign(1.0, subject)</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#valign","title":"valign","text":"<p>Aligns the an enclosed element (<code>subject</code>) in the y-axis.</p>"},{"location":"elements/layout/#expression_17","title":"Expression","text":"<pre><code>valign(align, subject)\n</code></pre>"},{"location":"elements/layout/#notation_17","title":"Notation","text":"<p>| <code>align</code>      | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_17","title":"Semantics","text":"<ol> <li>Given a total allocated space <code>Y</code>, <code>subject</code> will be positioned vertically    to <code>Y * align</code>.</li> <li>The <code>subject</code> will assume its minimum vertical limit.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#examples_2","title":"Examples","text":"<ol> <li><code>valign(0.0) // align subject to the top</code></li> <li><code>valign(1.0) // align subject to the right</code></li> <li><code>valign(0.5) // align subject to the middle</code></li> </ol>"},{"location":"elements/layout/#align_top","title":"align_top","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the top.</p>"},{"location":"elements/layout/#expression_18","title":"Expression","text":"<pre><code>align_top(subject)\n</code></pre>"},{"location":"elements/layout/#notation_18","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_18","title":"Semantics","text":"<ol> <li>Equivalent to <code>valign(0.0, subject)</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_middle","title":"align_middle","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the middle.</p>"},{"location":"elements/layout/#expression_19","title":"Expression","text":"<pre><code>align_middle(subject)\n</code></pre>"},{"location":"elements/layout/#notation_19","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_19","title":"Semantics","text":"<ol> <li>Equivalent to <code>valign(0.5, subject)</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_bottom","title":"align_bottom","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the bottom.</p>"},{"location":"elements/layout/#expression_20","title":"Expression","text":"<pre><code>align_bottom(subject)\n</code></pre>"},{"location":"elements/layout/#notation_20","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_20","title":"Semantics","text":"<ol> <li>Equivalent to <code>valign(1.0, subject)</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_left_top","title":"align_left_top","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the left-top.</p>"},{"location":"elements/layout/#expression_21","title":"Expression","text":"<pre><code>align_left_top(subject)\n</code></pre>"},{"location":"elements/layout/#notation_21","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_21","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_left(align_top(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_center_top","title":"align_center_top","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the center-top.</p>"},{"location":"elements/layout/#expression_22","title":"Expression","text":"<pre><code>align_center_top(subject)\n</code></pre>"},{"location":"elements/layout/#notation_22","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_22","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_center(align_top(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_right_top","title":"align_right_top","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the right-top.</p>"},{"location":"elements/layout/#expression_23","title":"Expression","text":"<pre><code>align_right_top(subject)\n</code></pre>"},{"location":"elements/layout/#notation_23","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_23","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_right(align_top(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_left_middle","title":"align_left_middle","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the left-middle.</p>"},{"location":"elements/layout/#expression_24","title":"Expression","text":"<pre><code>align_left_middle(subject)\n</code></pre>"},{"location":"elements/layout/#notation_24","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_24","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_left(align_middle(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_center_middle","title":"align_center_middle","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the center-middle.</p>"},{"location":"elements/layout/#expression_25","title":"Expression","text":"<pre><code>align_center_middle(subject)\n</code></pre>"},{"location":"elements/layout/#notation_25","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_25","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_center(align_middle(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_right_middle","title":"align_right_middle","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the right-middle.</p>"},{"location":"elements/layout/#expression_26","title":"Expression","text":"<pre><code>align_right_middle(subject)\n</code></pre>"},{"location":"elements/layout/#notation_26","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_26","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_right(align_middle(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_left_bottom","title":"align_left_bottom","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the left-bottom.</p>"},{"location":"elements/layout/#expression_27","title":"Expression","text":"<pre><code>align_left_bottom(subject)\n</code></pre>"},{"location":"elements/layout/#notation_27","title":"Notation","text":"<p>| subject   | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_27","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_left(align_bottom(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_center_bottom","title":"align_center_bottom","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the center-bottom.</p>"},{"location":"elements/layout/#expression_28","title":"Expression","text":"<pre><code>align_center_bottom(subject)\n</code></pre>"},{"location":"elements/layout/#notation_28","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_28","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_center(align_bottom(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#align_right_bottom","title":"align_right_bottom","text":"<p>Aligns the an enclosed element (<code>subject</code>) to the right-bottom.</p>"},{"location":"elements/layout/#expression_29","title":"Expression","text":"<pre><code>align_right_bottom(subject)\n</code></pre>"},{"location":"elements/layout/#notation_29","title":"Notation","text":"<p>| <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_29","title":"Semantics","text":"<ol> <li>Equivalent to <code>align_right(align_bottom(subject))</code></li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#margin-elements","title":"Margin Elements","text":"<p>Margins add some space around elements. There is a comprehensive list of margin elements in the Elements Library that can be used for various purposes. This section catalogues all the available margin elements.</p>"},{"location":"elements/layout/#margin","title":"margin","text":"<p>Adds a margin all around an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_30","title":"Expression","text":"<pre><code>margin({ left, top, right, bottom }, subject)\n</code></pre>"},{"location":"elements/layout/#notation_30","title":"Notation","text":"<p>| <code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>  | <code>float</code>               | | <code>subject</code>                         | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_30","title":"Semantics","text":"<ol> <li>Space is added to the left, top, right, and bottom of the subject with the    given parameters.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>margin</code> does not violate the natural limits of the subject.    <code>margin</code> will respect the subject's min-max constraints and resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#left_margin","title":"left_margin","text":"<p>Adds a margin to the left of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_31","title":"Expression","text":"<pre><code>left_margin(left, subject)\n</code></pre>"},{"location":"elements/layout/#notation_31","title":"Notation","text":"<p>| <code>left</code>       | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_31","title":"Semantics","text":"<ol> <li>Space is added to the left of the subject with the given parameter.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>left_margin</code> does not violate the natural limits of the subject.    <code>left_margin</code> will respect the subject's min-max constraints and    resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#right_margin","title":"right_margin","text":"<p>Adds a margin to the right of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_32","title":"Expression","text":"<pre><code>right_margin(right, subject)\n</code></pre>"},{"location":"elements/layout/#notation_32","title":"Notation","text":"<p>| <code>right</code>      | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_32","title":"Semantics","text":"<ol> <li>Space is added to the right of the subject with the given parameter.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>right_margin</code> does not violate the natural limits of the subject.    <code>right_margin</code> will respect the subject's min-max constraints and    resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#top_margin","title":"top_margin","text":"<p>Adds a margin to the top of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_33","title":"Expression","text":"<pre><code>top_margin(top, subject)\n</code></pre>"},{"location":"elements/layout/#notation_33","title":"Notation","text":"<p>| <code>top</code>        | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_33","title":"Semantics","text":"<ol> <li>Space is added to the top of the subject with the given parameter.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>top_margin</code> does not violate the natural limits of the subject.    <code>top_margin</code> will respect the subject's min-max constraints and    resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#bottom_margin","title":"bottom_margin","text":"<p>Adds a margin to the bottom of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expression_34","title":"Expression","text":"<pre><code>bottom_margin(bottom, subject)\n</code></pre>"},{"location":"elements/layout/#notation_34","title":"Notation","text":"<p>| <code>bottom</code>     | <code>float</code>               | | <code>subject</code>    | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_34","title":"Semantics","text":"<ol> <li>Space is added to the to the bottom of the subject with the given    parameter.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>bottom_margin</code> does not violate the natural limits of the subject.    <code>bottom_margin</code> will respect the subject's min-max constraints and    resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#hmargin","title":"hmargin","text":"<p>(same as <code>left_right_margin</code>)</p> <p></p> <p>Adds a margin to the left and right sides of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expressions","title":"Expressions","text":"<pre><code>// variant 1\nhmargin({ left, right }, subject)\n// variant 2\nhmargin(left, right, subject)\n// variant 3\nleft_right_margin({ left, right }, subject)\n// variant 4\nleft_right_margin(left, right, subject)\n</code></pre>"},{"location":"elements/layout/#notation_35","title":"Notation","text":"<p>| <code>left</code>, <code>right</code>    | <code>float</code>               | | <code>subject</code>          | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_35","title":"Semantics","text":"<ol> <li>Space is added to the to the left and right sides of the subject with the    given parameters.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>hmargin</code> (and variants) does not violate the natural limits of the    subject. <code>hmargin</code> (and variants) will respect the subject's min-max    constraints and resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#vmargin","title":"vmargin","text":"<p>(same as <code>top_bottom_margin</code>)</p> <p></p> <p>Adds a margin to the top and bottom sides of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expressions_1","title":"Expressions","text":"<pre><code>// variant 1\nvmargin({ top, bottom }, subject)\n// variant 2\nvmargin(top, bottom, subject)\n// variant 3\ntop_bottom_margin({ top, bottom }, subject)\n// variant 4\ntop_bottom_margin(top, bottom, subject)\n</code></pre>"},{"location":"elements/layout/#notation_36","title":"Notation","text":"<p>| <code>top</code>, <code>bottom</code>    | <code>float</code>               | | <code>subject</code>          | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_36","title":"Semantics","text":"<ol> <li>Space is added to the to the top and bottom sides of the subject with the    given parameters.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>vmargin</code> (and variants) does not violate the natural limits of the    subject. <code>vmargin</code> (and variants) will respect the subject's min-max    constraints and resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#left_top_margin","title":"left_top_margin","text":"<p>Adds a margin to the left and top sides of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expressions_2","title":"Expressions","text":"<pre><code>// variant 1\nleft_top_margin({ left, top }, subject)\n// variant 2\nleft_top_margin(left, top, subject)\n</code></pre>"},{"location":"elements/layout/#notation_37","title":"Notation","text":"<p>| <code>left</code>, <code>top</code>      | <code>float</code>               | | <code>subject</code>          | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_37","title":"Semantics","text":"<ol> <li>Space is added to the to the left and top sides of the subject with the    given parameters.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>left_top_margin</code> (and variant) does not violate the natural limits    of the subject. <code>left_top_margin</code> (and variant) will respect the subject's    min-max constraints and resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#left_bottom_margin","title":"left_bottom_margin","text":"<p>Adds a margin to the left and bottom sides of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expressions_3","title":"Expressions","text":"<pre><code>// variant 1\nleft_bottom_margin({ left, bottom }, subject)\n// variant 2\nleft_bottom_margin(left, bottom, subject)\n</code></pre>"},{"location":"elements/layout/#notation_38","title":"Notation","text":"<p>| <code>left</code>, <code>bottom</code>   | <code>float</code>               | | <code>subject</code>          | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_38","title":"Semantics","text":"<ol> <li>Space is added to the to the left and bottom sides of the subject with the    given parameters.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>left_bottom_margin</code> (and variant) does not violate the natural    limits of the subject. <code>left_bottom_margin</code> (and variant) will respect    the subject's min-max constraints and resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#right_top_margin","title":"right_top_margin","text":"<p>Adds a margin to the right and top sides of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expressions_4","title":"Expressions","text":"<pre><code>// variant 1\nright_top_margin({ right, top }, subject)\n// variant 2\nright_top_margin(right, top, subject)\n</code></pre>"},{"location":"elements/layout/#notation_39","title":"Notation","text":"<p>| <code>right</code>, <code>top</code>     | <code>float</code>               | | <code>subject</code>          | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_39","title":"Semantics","text":"<ol> <li>Space is added to the to the right and top sides of the subject with the    given parameters.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>right_top_margin</code> (and variant) does not violate the natural limits    of the subject. <code>right_top_margin</code> (and variant) will respect the    subject's min-max constraints and resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#right_bottom_margin","title":"right_bottom_margin","text":"<p>Adds a margin to the right and bottom sides of an enclosed element (<code>subject</code>).</p>"},{"location":"elements/layout/#expressions_5","title":"Expressions","text":"<pre><code>// variant 1\nright_bottom_margin({ right, bottom }, subject)\n// variant 2\nright_bottom_margin(right, bottom, subject)\n</code></pre>"},{"location":"elements/layout/#notation_40","title":"Notation","text":"<p>| <code>right</code>, <code>bottom</code>  | <code>float</code>               | | <code>subject</code>          | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_40","title":"Semantics","text":"<ol> <li>Space is added to the to the right and bottom sides of the subject with the    given parameters.</li> <li>The element's limits is overridden to account for the additional space.</li> <li>The <code>right_bottom_margin</code> (and variant) does not violate the natural    limits of the subject. <code>right_bottom_margin</code> (and variant) will respect    the subject's min-max constraints and resizability.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#floating-element","title":"Floating Element","text":"<p>A floating element allows arbitrary placement of an enclosed element (<code>subject</code>) in the main view.</p>"},{"location":"elements/layout/#expression_35","title":"Expression","text":"<pre><code>floating({ left, top, right, bottom }, subject)\n</code></pre>"},{"location":"elements/layout/#notation_41","title":"Notation","text":"<p>| <code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>  | <code>float</code>               | | <code>subject</code>                         | Instance of <code>Element</code> |</p>"},{"location":"elements/layout/#semantics_41","title":"Semantics","text":"<ol> <li>The element will be placed exactly to the specified position in the main    view, constrained to the subject's natural limits.</li> <li>The floating element does not violate the natural limits of the subject.</li> <li>Returns instance of <code>Proxy</code>.</li> </ol>"},{"location":"elements/layout/#tiles-and-grids","title":"Tiles and Grids","text":"<p>Tiles are the most useful layout elements, followed by by Grids. Tiles are used everywhere for composing hierarchical elements in rows and columns, typical to all GUIs. Grids are similar to tiles. Both tiles and grids allow elements to fluidly adjust depending on available space. Tiles compute the layout of its elements using the children elements' size <code>limits</code> while grids lay out its elements using an externally supplied fractional coordinates that specify positions of the elements in the allocated space.</p> <p>Tiles are best used for composing UI elements while grids are best for composing tables.</p>"},{"location":"elements/layout/#horizontal-grids","title":"Horizontal Grids","text":"<p>Horizontal Grids are composites that lay out one or more child elements in a row following externally supplied horizontal fractional positions. Horizontal Grids have computed horizontal and vertical sizes following the natural <code>limits</code> of its children.</p>"},{"location":"elements/layout/#semantics_42","title":"Semantics","text":"<ol> <li>The elements are laid out in a single row, left to right, immediately next    to each other with no intervening space.</li> <li>The elements are positioned horizontally using the supplied fractional    positions. The fractional positions values range from 0.0 to 1.0, which    specify the child element's horizontal position from left (0.0) to right    (1.0).</li> <li>The grid's minimum vertical limit is computed as the maximum of the    children elements' minimum vertical limits.</li> <li>The grid's maximum vertical limit is computed as the minimum of the    children elements' maximum vertical limits.</li> <li>The final computed minimum limit is clamped to ensure it is not greater    than the computed maximum limit. Likewise the computed maximum limit is    clamped to ensure it is not less than the computed minimum limit.</li> <li>The supplied (horizontal) positions and computed (vertical) coordinates    may violate the limits of its children elements.</li> <li>If the allocated size of a child element is lower than the element's       minimum limits in either dimension, the element will be cropped.</li> <li>If a child element's maximum limits in either dimension is exceeded,       the element will be aligned to the top-left.</li> </ol>"},{"location":"elements/layout/#hgrid","title":"hgrid","text":"<p>Build a horizontal grid with a fixed number of elements.</p>"},{"location":"elements/layout/#expression_36","title":"Expression","text":"<pre><code>hgrid(positions, e1,...eN)\n</code></pre>"},{"location":"elements/layout/#notation_42","title":"Notation","text":"<p>| <code>N</code>             | The number of items                                             | | <code>e1,...eN</code>      | One or more child elements, instances of <code>Element</code> (more below) | | <code>positions</code>     | External container of fractional positions (more below)         |</p> <p>The external container, <code>positions</code>, can either be a plain array of type <code>float[N]</code> or <code>std::array&lt;float, N&gt;</code>. Elements <code>e1,...eN</code> are held in a <code>std::array&lt;element_ptr, N&gt;</code> managed by the horizontal grid element.</p>"},{"location":"elements/layout/#example","title":"Example","text":"<pre><code>static float positions[] = { 0.25, 0.5, 0.75, 1.0 };\n//...\nhgrid(positions, item1, item2, item3, item4)\n</code></pre> <p>:point_right: If the number of elements is not fixed, you can use an <code>hgrid_composite</code> (see below).</p>"},{"location":"elements/layout/#requirements","title":"Requirements","text":"<ol> <li>The number of supplied positions and elements should match, otherwise,    compiler error (no matching function for call to <code>hgrid</code>).</li> <li>The positions assume the first element is at <code>x=0</code> (it is at the left-most    position in the row). The fractional position of the second element is at    index <code>0</code>, the third at index <code>1</code>, and so on.</li> <li>The externally supplied positions should be sorted with increasing values    such that positions[n] &lt;= positions[n+1]. The behavior is undefined if    this is violated.</li> </ol>"},{"location":"elements/layout/#semantics_43","title":"Semantics","text":"<ol> <li>In addition to the semantics of Horizontal Grids, returns instance of    <code>Composite</code>.</li> </ol>"},{"location":"elements/layout/#hgrid_composite","title":"hgrid_composite","text":"<p>Create a horizontal grid with an indeterminate (dynamic) number of elements.</p>"},{"location":"elements/layout/#expression_37","title":"Expression","text":"<pre><code>hgrid_composite c{ positions };\n</code></pre>"},{"location":"elements/layout/#notation_43","title":"Notation","text":"<p>| <code>positions</code>     | External container of fractional positions, <code>std::vector&lt;float&gt;</code> | | <code>c</code>             | Instance of type <code>hgrid_composite</code>                                 |</p> <p>The <code>hgrid_composite</code> is basically a <code>std::vector&lt;element_ptr&gt;</code> that the client uses to manage the composite's elements. The lifetime of the container, <code>c</code>, is the client's responsibility. You use <code>hgrid_composite</code> just as you would a <code>std::vector</code>, such as <code>push_back</code> a child element. Just keep in mind that we are dealing with <code>element_ptr</code> items.</p>"},{"location":"elements/layout/#example_1","title":"Example","text":"<pre><code>c.push_back(share(child));\n</code></pre> <p>:point_right: <code>share</code> turns an element object into an <code>element_ptr</code> held by the <code>std::vector&lt;element_ptr&gt;</code> in <code>hgrid_composite</code>.</p> <p><code>hgrid_composite</code> is itself also an <code>element</code> and while it has <code>std::vector</code>'s interface, it can also be <code>share</code>d like any element, which allows you to build complex hierarchical structures.</p>"},{"location":"elements/layout/#requirements_1","title":"Requirements","text":"<ol> <li>The number of items in the external coordinates vector <code>positions</code> must match    with the number of elements at any given time.</li> <li>The positions assume the first element is at <code>x=0</code> (it is at the left-most    position in the row). The fractional position of the second element is at    index <code>0</code>, the third at index <code>1</code>, and so on.</li> <li>The externally supplied positions should be sorted with increasing values    such that positions[n] &lt;= positions[n+1]. The behavior is undefined if    this is violated.</li> </ol>"},{"location":"elements/layout/#horizontal-tiles","title":"Horizontal Tiles","text":"<p>Horizontal Tiles are similar to Horizontal Grids, but allow elements to fluidly adjust horizontally depending on available space. Horizontal Tiles are best used for composing UI elements while Horizontal Grids are best for composing tables.</p>"},{"location":"elements/layout/#semantics_44","title":"Semantics","text":"<ol> <li>The elements are laid out in a single row, left to right, immediately next    to each other with no intervening space.</li> <li>The elements are positioned horizontally using the children's natural    limits.</li> <li>Horizontal space is allocated using this algorithm:</li> <li>Space is allocated for each child element following the child's natural       minimum horizontal limit.</li> <li>If the allocated space exceeds the sum of all children elements'       minimum horizontal limits, the extra space is given to each       horizontally resizable element (<code>limits.min.x &lt; limits.max.x</code>).</li> <li>The element's \"stretchiness\" determines how much extra space is given       to it according to the element's <code>stretch()</code> member function. A stretch       value of <code>1.0</code> is default. A stretchiness value of 2.0 means that the       element is able to stretch twice as much compared to its siblings.       Horizontally fixed-sized elements will not be stretched (element d in       the diagram). (Also see Stretch Elements).</li> <li>The tile's minimum vertical limit is computed as the maximum of the    children elements' minimum vertical limits.</li> <li>The grid's maximum vertical limit is computed as the minimum of the    children elements' maximum vertical limits.</li> <li>The final computed minimum limit is clamped to ensure it is not greater    than the computed maximum limit. Likewise the computed maximum limit is    clamped to ensure it is not less than the computed minimum limit.</li> <li>The supplied (horizontal) and computed (vertical) coordinates may violate    the limits of its children elements.</li> <li>If the allocated size of a child element is lower than the element's       minimum limits in either dimension, the element will be cropped.</li> <li>If a child element's maximum limits in either dimension is exceeded,       the element will be aligned to the top-left.</li> </ol>"},{"location":"elements/layout/#htile","title":"htile","text":"<p>Build a horizontal tile with a fixed number of elements.</p>"},{"location":"elements/layout/#expression_38","title":"Expression","text":"<pre><code>htile(e1,...eN)\n</code></pre>"},{"location":"elements/layout/#notation_44","title":"Notation","text":"<p>| <code>N</code>             | The number of items                                          | | <code>e1,...eN</code>      | One or more child elements, instances of <code>Element</code> (more below)|</p> <p>Elements <code>e1,...eN</code> are held in a <code>std::array&lt;element_ptr, N&gt;</code> managed by the horizontal tile element.</p>"},{"location":"elements/layout/#example_2","title":"Example:","text":"<pre><code>htile(item1, item2, item3, item4)\n</code></pre> <p>:point_right: If the number of elements is not fixed, you can use an <code>htile_composite</code> (see below).</p>"},{"location":"elements/layout/#semantics_45","title":"Semantics","text":"<ol> <li>In addition to the semantics of Horizontal Tiles, returns instance of    <code>Composite</code>.</li> </ol>"},{"location":"elements/layout/#htile_composite","title":"htile_composite","text":"<p>Create a horizontal tile with an indeterminate (dynamic) number of elements.</p>"},{"location":"elements/layout/#expression_39","title":"Expression","text":"<pre><code>htile_composite c;\n</code></pre>"},{"location":"elements/layout/#notation_45","title":"Notation","text":"<p>| <code>c</code>             | Instance of type <code>htile_composite</code>   |</p> <p>The <code>htile_composite</code> is basically a <code>std::vector&lt;element_ptr&gt;</code> that the client uses to manage the composite's elements. The lifetime of the container, <code>c</code>, is the client's responsibility. You use <code>htile_composite</code> just as you would a <code>std::vector</code>, such as <code>push_back</code> a child element. Just keep in mind that we are dealing with <code>element_ptr</code> items.</p>"},{"location":"elements/layout/#example_3","title":"Example","text":"<pre><code>c.push_back(share(child));\n</code></pre> <p>:point_right: <code>share</code> turns an element object into an <code>element_ptr</code> held by the <code>std::vector&lt;element_ptr&gt;</code> in <code>htile_composite</code>.</p> <p><code>htile_composite</code> is itself also an <code>element</code> and while it has <code>std::vector</code>'s interface, it can also be <code>share</code>d like any element, which allows you to build complex hierarchical structures.</p>"},{"location":"elements/layout/#vertical-grids","title":"Vertical Grids","text":"<p>Vertical Grids are composites that lay out one or more child elements in a column following externally supplied vertical fractional positions. Vertical Grids have computed horizontal and vertical sizes following the natural <code>limits</code> of its children.</p>"},{"location":"elements/layout/#semantics_46","title":"Semantics","text":"<ol> <li>The elements are laid out in a single column, top to bottom, immediately    next to each other with no intervening space.</li> <li>The elements are positioned vertically using the supplied fractional    positions. The fractional positions values range from 0.0 to 1.0, which    specify the child element's vertical position from top (0.0) to bottom    (1.0).</li> <li>The grid's minimum horizontal limit is computed as the maximum of the    children elements' minimum horizontal limits.</li> <li>The grid's maximum horizontal limit is computed as the minumum of the    children elements' maximum horizontal limits.</li> <li>The final computed minimum limit is clamped to ensure it is not greater    than the computed maximum limit. Likewise the computed maximum limit is    clamped to ensure it is not less than the computed minimum limit.</li> <li>The supplied (vertical) positions and computed (horizontal) coordinates    may violate the limits of its children elements.</li> <li>If the allocated size of a child element is lower than the element's       minimum limits in either dimension, the element will be cropped.</li> <li>If a child element's maximum limits in either dimension is exceeded,       the element will be aligned to the top-left.</li> </ol>"},{"location":"elements/layout/#vgrid","title":"vgrid","text":"<p>Build a vertical grid with a fixed number of elements.</p>"},{"location":"elements/layout/#expression_40","title":"Expression","text":"<pre><code>vgrid(positions, e1,...eN)\n</code></pre>"},{"location":"elements/layout/#notation_46","title":"Notation","text":"<p>| <code>N</code>             | The number of items                                             | | <code>e1,...eN</code>      | One or more child elements, instances of <code>Element</code> (more below) | | <code>positions</code>     | External container of fractional positions (more below)         |</p> <p>The External container, <code>positions</code> is an external can either be a plain array of type <code>float[N]</code> or <code>std::array&lt;float, N&gt;</code>. Elements <code>e1,...eN</code> are held in a <code>std::array&lt;element_ptr, N&gt;</code> managed by the vertical grid element.</p>"},{"location":"elements/layout/#example_4","title":"Example","text":"<pre><code>static float positions[] = { 0.25, 0.5, 0.75, 1.0 };\n//...\nvgrid(positions, item1, item2, item3, item4)\n</code></pre> <p>:point_right: If the number of elements is not fixed, you can use an <code>vgrid_composite</code> (see below).</p>"},{"location":"elements/layout/#requirements_2","title":"Requirements","text":"<ol> <li>The number of supplied coordinates and elements should match, otherwise,    compiler error (no matching function for call to <code>vgrid</code>).</li> <li>The positions assume the first element is at <code>x=0</code> (it is at the top-most    position in the column). The fractional position of the second element is at    index <code>0</code>, the third at index <code>1</code>, and so on.</li> <li>The externally supplied positions should be sorted with increasing values    such that positions[n] &lt;= positions[n+1]. The behavior is undefined if    this is violated.</li> </ol>"},{"location":"elements/layout/#semantics_47","title":"Semantics","text":"<ol> <li>In addition to the semantics of Vertical Grids, returns instance of    <code>Composite</code>.</li> </ol>"},{"location":"elements/layout/#vgrid_composite","title":"vgrid_composite","text":"<p>Create a vertical grid with an indeterminate (dynamic) number of elements.</p>"},{"location":"elements/layout/#expression_41","title":"Expression","text":"<pre><code>vgrid_composite c{ positions };\n</code></pre>"},{"location":"elements/layout/#notation_47","title":"Notation","text":"<p>| <code>positions</code>     | External container of fractional positions, <code>std::vector&lt;float&gt;</code>   | | <code>c</code>             | Instance of type <code>vgrid_composite</code>                                 |</p> <p>The <code>vgrid_composite</code> is basically a <code>std::vector&lt;element_ptr&gt;</code> that the client uses to manage the composite's elements. The lifetime of the container, <code>c</code>, is the client's responsibility. You use <code>vgrid_composite</code> just as you would a <code>std::vector</code>, such as <code>push_back</code> a child element. Just keep in mind that we are dealing with <code>element_ptr</code> items. Example:</p> <pre><code>c.push_back(share(child));\n</code></pre> <p>:point_right: <code>share</code> turns an element object into an <code>element_ptr</code> held by the <code>std::vector&lt;element_ptr&gt;</code> in <code>vgrid_composite</code>.</p> <p><code>vgrid_composite</code> is itself also an <code>element</code> and while it has <code>std::vector</code>'s interface, it can also be <code>share</code>d like any element, which allows you to build complex hierarchical structures.</p>"},{"location":"elements/layout/#requirements_3","title":"Requirements","text":"<ol> <li>The number of items in the external coordinates vector <code>positions</code> must match    with the number of elements at any given time.</li> <li>The positions assume the first element is at <code>x=0</code> (it is at the top-most    position in the column). The fractional position of the second element is at    index <code>0</code>, the third at index <code>1</code>, and so on.</li> <li>The externally supplied positions should be sorted with increasing values    such that positions[n] &lt;= positions[n+1]. The behavior is undefined if    this is violated.</li> </ol>"},{"location":"elements/layout/#vertical-tiles","title":"Vertical Tiles","text":"<p>Vertical Tiles are similar to Vertical Grids, but allow elements to fluidly adjust vertically depending on available space. Vertical Tiles are best used for composing UI elements while Vertical Grids are best for composing tables.</p>"},{"location":"elements/layout/#semantics_48","title":"Semantics","text":"<ol> <li>The elements are laid out in a single column, left to right, immediately    next to each other with no intervening space.</li> <li>The elements are positioned vertically using the children's natural    limits.</li> <li>Vertical space is allocated using this algorithm:</li> <li>Space is allocated for each child element following the child's natural       minimum vertical limit.</li> <li>If the allocated space exceeds the sum of all children elements'       minimum vertical limits, the extra space is given to each       vertically resizable element (<code>limits.min.y &lt; limits.max.y</code>).</li> <li>The element's \"stretchiness\" determines how much extra space is given       to it according to the element's <code>stretch()</code> member function. A stretch       value of <code>1.0</code> is default. A stretchiness value of 2.0 means that the       element is able to stretch twice as much compared to its siblings.       Vertically fixed-sized elements will not be stretched (element b in the       diagram). (Also see Stretch Elements).</li> <li>The tile's minimum horizontal limit is computed as the maximum of the    children elements' minimum horizontal limits.</li> <li>The grid's maximum horizontal limit is computed as the minumum of the    children elements' maximum horizontal limits.</li> <li>The final computed minimum limit is clamped to ensure it is not greater    than the computed maximum limit. Likewise the computed maximum limit is    clamped to ensure it is not less than the computed minimum limit.</li> <li>The supplied (vertical) and computed (horizontal) coordinates may violate    the limits of its children elements.</li> <li>If the allocated size of a child element is lower than the element's       minimum limits in either dimension, the element will be cropped.</li> <li>If a child element's maximum limits in either dimension is exceeded,       the element will be aligned to the top-left.</li> </ol>"},{"location":"elements/layout/#vtile","title":"vtile","text":"<p>Build a vertical tile with a fixed number of elements.</p>"},{"location":"elements/layout/#expression_42","title":"Expression","text":"<pre><code>vtile(e1,...eN)\n</code></pre>"},{"location":"elements/layout/#notation_48","title":"Notation","text":"<p>| <code>N</code>             | The number of items                                          | | <code>e1,...eN</code>      | One or more child elements, instances of <code>Element</code> (more below)|</p> <p>Elements <code>e1,...eN</code> are held in a <code>std::array&lt;element_ptr, N&gt;</code> managed by the vertical tile element.</p>"},{"location":"elements/layout/#example_5","title":"Example","text":"<pre><code>vtile(item1, item2, item3, item4)\n</code></pre> <p>:point_right: If the number of elements is not fixed, you can use an <code>vtile_composite</code> (see below).</p>"},{"location":"elements/layout/#semantics_49","title":"Semantics","text":"<ol> <li>In addition to the semantics of Vertical Tiles, returns instance of    <code>Composite</code>.</li> </ol>"},{"location":"elements/layout/#vtile_composite","title":"vtile_composite","text":"<p>Create a vertical tile with an indeterminate (dynamic) number of elements:</p>"},{"location":"elements/layout/#expression_43","title":"Expression","text":"<pre><code>vtile_composite c;\n</code></pre>"},{"location":"elements/layout/#notation_49","title":"Notation","text":"<p>| <code>c</code>             | Instance of type <code>vtile_composite</code>   |</p> <p>The <code>vtile_composite</code> is basically a <code>std::vector&lt;element_ptr&gt;</code> that the client uses to manage the composite's elements. The lifetime of the container, <code>c</code>, is the client's responsibility. You use <code>vtile_composite</code> just as you would a <code>std::vector</code>, such as <code>push_back</code> a child element. Just keep in mind that we are dealing with <code>element_ptr</code> items.</p>"},{"location":"elements/layout/#example_6","title":"Example","text":"<pre><code>c.push_back(share(child));\n</code></pre> <p>:point_right: <code>share</code> turns an element object into an <code>element_ptr</code> held by the <code>std::vector&lt;element_ptr&gt;</code> in <code>vtile_composite</code>.</p> <p><code>vtile_composite</code> is itself also an <code>element</code> and while it has <code>std::vector</code>'s interface, it can also be <code>share</code>d like any element, which allows you to build complex hierarchical structures.</p>"},{"location":"elements/layout/#layers","title":"Layers","text":"<p>The Elements Library is 2D, but the z-axis pertains to top-to-bottom layering. Layers allow groups of elements to be placed in the z-axis where higher-level elements obscure or hide lower-level elements.</p>"},{"location":"elements/layout/#semantics_50","title":"Semantics","text":"<ol> <li>The elements are laid out in the z-axis, top to bottom.</li> <li>Rendering is done bottom-up; the bottom-most elements are drawn first.</li> <li>UI control (such as mouse clicks) proceeds from top to bottom.    Higher-level elements are given control priority. If a higher-level    element does not process the event, lower-level elements are given a    chance.</li> <li>The layer's minimum limit is computed as the maximum of the children    elements' minimum limits.</li> <li>The layer's maximum limit is computed as the minimum of the children    elements' maximum limits.</li> <li>The final computed minimum limit is clamped to ensure it is not greater    than the computed maximum limit. Likewise the computed maximum limit is    clamped to ensure it is not less than the computed minimum limit.</li> <li>The computed (vertical) and (horizontal) coordinates may violate the    limits of its children elements.</li> <li>If the allocated size of a child element is lower than the element's       minimum limits in either dimension, the element will be cropped.</li> <li>If a child element's maximum limits in either dimension is exceeded,       the element will be aligned to the top-left.</li> </ol>"},{"location":"elements/layout/#layer","title":"layer","text":"<p>Create a layer composite with a fixed number of elements.</p>"},{"location":"elements/layout/#expression_44","title":"Expression","text":"<pre><code>layer(e1,...eN)\n</code></pre>"},{"location":"elements/layout/#notation_50","title":"Notation","text":"<p>| <code>N</code>             | The number of items                                          | | <code>e1,...eN</code>      | One or more child elements, instances of <code>Element</code> (more below)|</p> <p>Elements <code>e1,...eN</code> are held in a <code>std::array&lt;element_ptr, N&gt;</code> managed by the layer element.</p>"},{"location":"elements/layout/#example_7","title":"Example","text":"<pre><code>layer(item1, item2, item3, item4)\n</code></pre> <p>:point_right: If the number of elements is not fixed, you can use an <code>layer_composite</code> (see below).</p>"},{"location":"elements/layout/#semantics_51","title":"Semantics","text":"<ol> <li>In addition to the semantics of Layers, returns instance of <code>Composite</code>.</li> </ol>"},{"location":"elements/layout/#layer_composite","title":"layer_composite","text":"<p>Create a layer with an indeterminate (dynamic) number of elements:</p> <pre><code>layer_composite c;\n</code></pre>"},{"location":"elements/layout/#notation_51","title":"Notation","text":"<p>| <code>c</code>             | Instance of type <code>layer_composite</code>   |</p> <p>The <code>layer_composite</code> is basically a <code>std::vector&lt;element_ptr&gt;</code> that the client uses to manage the composite's elements. The lifetime of the container, <code>c</code>, is the client's responsibility. You use <code>layer_composite</code> just as you would a <code>std::vector</code>, such as <code>push_back</code> a child element. Just keep in mind that we are dealing with <code>element_ptr</code> items.</p>"},{"location":"elements/layout/#example_8","title":"Example","text":"<pre><code>c.push_back(share(child));\n</code></pre> <p>:point_right: <code>share</code> turns an element object into an <code>element_ptr</code> held by the <code>std::vector&lt;element_ptr&gt;</code> in <code>layer_composite</code>.</p> <p><code>layer_composite</code> is itself also an <code>element</code> and while it has <code>std::vector</code>'s interface, it can also be <code>share</code>d like any element, which allows you to build complex hierarchical structures.</p>"},{"location":"elements/layout/#decks","title":"Decks","text":"<p>The Deck is very similar to layers. Elements are placed in the z-axis. But unlike layers, only selected element is active (top-most by default).</p>"},{"location":"elements/layout/#semantics_52","title":"Semantics","text":"<ol> <li>Everything listed in the layer's Semantics, except 2 and 3.</li> <li>Only the active selected element element is drawn.</li> <li>Only the active selected element is given the chance to process UI control.</li> </ol>"},{"location":"elements/layout/#deck","title":"deck","text":"<p>Create a deck composite with a fixed number of elements.</p>"},{"location":"elements/layout/#expression_45","title":"Expression","text":"<pre><code>deck(e1, e2, e3... eN)\n</code></pre>"},{"location":"elements/layout/#notation_52","title":"Notation","text":"<p>| <code>N</code>             | The number of items                                          | | <code>e1,...eN</code>      | One or more child elements, instances of <code>Element</code> (more below)|</p> <p>Elements <code>e1,...eN</code> are held in a <code>std::array&lt;element_ptr, N&gt;</code> managed by the deck element.</p>"},{"location":"elements/layout/#example_9","title":"Example","text":"<pre><code>deck(item1, item2, item3, item4)\n</code></pre> <p>:point_right: If the number of elements is not fixed, you can use an <code>deck_composite</code> (see below).</p>"},{"location":"elements/layout/#requirements_4","title":"Requirements","text":"<ol> <li>In addition to the semantics of Deck, returns instance of <code>Composite</code>.</li> </ol>"},{"location":"elements/layout/#deck_composite","title":"deck_composite","text":"<p>Create a deck with an indeterminate (dynamic) number of elements:</p>"},{"location":"elements/layout/#expression_46","title":"Expression","text":"<pre><code>deck_composite c;\n</code></pre>"},{"location":"elements/layout/#notation_53","title":"Notation","text":"<p>| <code>c</code>             | Instance of type <code>deck_composite</code>   |</p> <p>The <code>deck_composite</code> is basically a <code>std::vector&lt;element_ptr&gt;</code> that the client uses to manage the composite's elements. The lifetime of the container, <code>c</code>, is the client's responsibility. You use <code>deck_composite</code> just as you would a <code>std::vector</code>, such as <code>push_back</code> a child element. Just keep in mind that we are dealing with <code>element_ptr</code> items.</p>"},{"location":"elements/layout/#example_10","title":"Example","text":"<pre><code>c.push_back(share(child));\n</code></pre> <p>:point_right: <code>share</code> turns an element object into an <code>element_ptr</code> held by the <code>std::vector&lt;element_ptr&gt;</code> in <code>deck_composite</code>.</p> <p><code>deck_composite</code> is itself also an <code>element</code> and while it has <code>std::vector</code>'s interface, it can also be <code>share</code>d like any element, which allows you to build complex hierarchical structures.</p>"},{"location":"elements/layout/#flow-element","title":"Flow Element","text":"<p>The flow element, is a composite that lays out its children much like the way text is laid out: lay out each element from left to right, fitting as much elements as possible following each child's maximum horizontal limit. Once a row is full, move to the next row and do the same until the end of the row is filled. Repeat the procedure until all the elements are laid out. The height of each row is determined by the maximum vertical limit of all the elements to be laid out in that row. The following graphic depicts a simplified layout scenario for child elements <code>a</code> to <code>r</code>.</p> <p></p> <p>The child elements arranged in a <code>flow</code> composite are automatically re-flowed (re-lay-out) when the view size changes.</p> <p>To have elements laid out using <code>flow</code>, you need to make a <code>flow_composite</code>.</p>"},{"location":"elements/layout/#flow_composite","title":"flow_composite","text":"<p>Create a <code>flow_composite</code> with an indeterminate (dynamic) number of elements.</p>"},{"location":"elements/layout/#expression_47","title":"Expression","text":"<pre><code>flow_composite c;\n</code></pre>"},{"location":"elements/layout/#notation_54","title":"Notation","text":"<p>| <code>c</code>             | Instance of type <code>flow_composite</code>   |</p> <p>The <code>flow_composite</code> is basically a <code>std::vector&lt;element_ptr&gt;</code> that the client uses to manage the composite's elements. The lifetime of the container, <code>c</code>, is the client's responsibility. You use <code>flow_composite</code> just as you would a <code>std::vector</code>, such as <code>push_back</code> a child element, <code>child</code>. Just keep in mind that we are dealing with <code>element_ptr</code> items.</p>"},{"location":"elements/layout/#example_11","title":"Example","text":"<pre><code>c.push_back(share(child));\n</code></pre> <p>:point_right: <code>share</code> turns an element object into an <code>element_ptr</code> held by the <code>std::vector&lt;element_ptr&gt;</code> in <code>flow_composite</code>.</p> <p><code>flow_composite</code> is itself also an <code>element</code> and while it has <code>std::vector</code>'s interface, it can also be <code>share</code>d like any element, which allows you to build complex hierarchical structures.</p>"},{"location":"elements/layout/#flow","title":"flow","text":"<p>Once we have a <code>flow_composite</code>, we can place its contents in a <code>flow</code> element.</p>"},{"location":"elements/layout/#expression_48","title":"Expression","text":"<pre><code>flow(c)\n</code></pre>"},{"location":"elements/layout/#notation_55","title":"Notation","text":"<p>| <code>c</code>             | Instance of <code>flow_composite</code> |</p>"},{"location":"elements/layout/#semantics_53","title":"Semantics","text":"<ol> <li>Returns instance of <code>Composite</code>.</li> </ol>"},{"location":"elements/setup/","title":"Setup and Installation","text":""},{"location":"elements/setup/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Requirements</li> <li>MacOS Installation</li> <li>Windows Installation</li> <li>Windows Installation (MinGW + Gtk)</li> <li>Linux Installation</li> <li>Building and Running the examples</li> <li>Building Outside the Project</li> </ul>"},{"location":"elements/setup/#requirements","title":"Requirements","text":"<p>Here are the basic tools that you need in order to use the library:</p> <ol> <li>A C++17 compiler</li> <li>Git</li> <li>CMake 3.9.6 or higher</li> </ol>"},{"location":"elements/setup/#c17","title":"C++17","text":"<p>Elements currently supports the MacOS, Windows and Linux. In the Mac, we support the XCode IDE. Elements is tested with XCode 10 and XCode 11.</p> <p>In Windows, we support Windows 10 with Visual Studio 2019, although it will probably also work with older versions of the Visual Studio IDE. In Linux, we support both Clang and g++. Get the latest version with a C++17 compiler.</p> <p>The CLion IDE is supported on all platforms, it simply requires the CMakeLists.txt file to open and build the project.</p>"},{"location":"elements/setup/#git","title":"Git","text":"<p>Elements C++ GUI library, plus the Cycfi Infra library:</p> <pre><code>git clone --recurse-submodules  https://github.com/cycfi/elements.git\n</code></pre>"},{"location":"elements/setup/#cmake","title":"CMake","text":"<p>Make sure you have CMake 3.9.6 or higher. Follow the installation procedure for your platform, or follow the instructions below for specific environments.</p>"},{"location":"elements/setup/#required-libraries","title":"Required Libraries","text":"<p>Here are Element's dependencies:</p> <ol> <li>Cairo</li> <li>fontconfig</li> <li>freetype2</li> <li>bzip2</li> <li>expat</li> <li>zlib</li> <li>libpng</li> <li>pkg-config</li> </ol> <p>Specific instructions are provided below for specific environments.</p> <p>Additionally, the following libraries are dragged as submodules:</p> <ol> <li>The Cycfi infra library</li> </ol> <p>Infra provides some basic groundwork common to Cycfi libraries, including Elements.</p>"},{"location":"elements/setup/#macos","title":"MacOS","text":""},{"location":"elements/setup/#install-required-libraries","title":"Install required libraries","text":"<p>This by using Homebrew:</p> <pre><code>brew install cairo\nbrew install fontconfig\nbrew install bzip2\nbrew install expat\nbrew install zlib\nbrew install libpng\nbrew install pkg-config\n</code></pre>"},{"location":"elements/setup/#install-cmake","title":"Install CMake","text":"<pre><code>brew install cmake\n</code></pre>"},{"location":"elements/setup/#generating-the-project-using-cmake","title":"Generating the Project using CMake","text":"<p>There are multiple ways to generate a project file using CMake depending on your platform and desired IDE, but here are some examples for the MacOS:</p>"},{"location":"elements/setup/#using-xcode","title":"Using XCode","text":"<ol> <li>CD to the elements library.</li> <li>Make a build directory inside the elements directory.</li> <li>CD to the build directory.</li> <li>invoke cmake.</li> </ol> <pre><code>cd elements\nmkdir build\ncd build\ncmake -GXcode ../\n</code></pre> <p>If successful, CMake will generate an XCode project in the build directory. Open the project file elements.xcodeproj and build all. You should see a couple of example applications.</p>"},{"location":"elements/setup/#windows","title":"Windows","text":""},{"location":"elements/setup/#install-required-libraries_1","title":"Install required libraries","text":"<p>The Windows port comes with the cairo, fontconfig and freetype2 binaries as part of the installation in the <code>lib/external</code> directory, so there is no need to have these libraries installed. CMake will take care of the dependencies.</p>"},{"location":"elements/setup/#install-cmake_1","title":"Install CMake","text":"<p>Follow the installation procedure.</p>"},{"location":"elements/setup/#generating-the-project-using-cmake_1","title":"Generating the Project using CMake","text":"<p>Assuming you have Visual Studio 2019 installed.</p> <p>You want NMake approach if you prefer <code>make</code>-style commandline tool, or <code>Visual Studio 2019 GUI</code> approach otherwise.</p>"},{"location":"elements/setup/#visual-studio-2019-gui","title":"Visual Studio 2019 GUI","text":"<ol> <li>CD to the elements library.</li> <li>Make a build directory inside the elements directory.</li> <li>CD to the build directory.</li> <li>invoke cmake.</li> </ol> <pre><code>cd elements\nmkdir build\ncd build\ncmake -G\"Visual Studio 16 2019\" ..//\n</code></pre> <p>If successful, cmake will generate a Visual Studio solution in the build directory. Open the project file elements.sln and build all. You should see a couple of example applications.</p>"},{"location":"elements/setup/#nmake","title":"NMake","text":"<ol> <li>Open a Command Prompt for VS 2019 ({x64/x86-64} {Native/Cross} Tools Command Prompt for VS 2019) in your start menu.</li> <li>CD to the elements library.</li> <li>Make a build directory inside the elements directory.</li> <li>CD to the build directory.</li> <li>invoke cmake.</li> </ol> <pre><code>cd elements\nmkdir build\ncd build\ncmake -G\"NMake Makefiles\" ..//\n</code></pre> <p>If successful, cmake will generate NMake Make files in the build directory. Invoke <code>nmake</code> to build the binary.</p>"},{"location":"elements/setup/#windows-mingw-gtk","title":"Windows (MinGW + Gtk)","text":""},{"location":"elements/setup/#install-msys2-toolchain-and-required-libraries","title":"Install MSYS2 toolchain and required libraries","text":"<p>MSYS2 is a software distro and building platform for Windows</p> <p>Download MSYS2 from its official website and install it. Its installation guide is on the home page.</p> <p>Open <code>MSYS2 MinGW 64-bit</code> or <code>MSYS2 MinGW 32-bit</code> from your start menu. Install tools and libraries: <pre><code>pacman -S ${MINGW_PACKAGE_PREFIX}-toolchain\npacman -S ${MINGW_PACKAGE_PREFIX}-cairo\npacman -S ${MINGW_PACKAGE_PREFIX}-gtk3\npacman -S make\n</code></pre></p>"},{"location":"elements/setup/#install-cmake_2","title":"Install CMake","text":"<pre><code>pacman -S ${MINGW_PACKAGE_PREFIX}-cmake\n</code></pre>"},{"location":"elements/setup/#generating-the-project-using-cmake_2","title":"Generating the Project using CMake","text":"<p>There are multiple ways to generate a project file using CMake depending on your platform and desired IDE, but here are some examples for MSYS2:</p>"},{"location":"elements/setup/#using-unix-makefiles","title":"Using UNIX makefiles","text":"<ol> <li>CD to the elements library.</li> <li>Make a build directory inside the elements directory.</li> <li>CD to the build directory.</li> <li>invoke cmake. <code>-DELEMENTS_HOST_UI_LIBRARY=gtk</code> tells cmake to build with Gtk.</li> </ol> <pre><code>cd elements\nmkdir build\ncd build\ncmake ../ -G \"Unix Makefiles\" -DELEMENTS_HOST_UI_LIBRARY=gtk\n</code></pre> <p>If successful, cmake will generate Unix Make files in the build directory.</p>"},{"location":"elements/setup/#linux","title":"Linux","text":""},{"location":"elements/setup/#install-required-libraries_2","title":"Install required libraries","text":"<p>In addition to the requirements listed in the requirements section, the GTK3 library is also required by the Linux port of Elements.</p> <p>On Debian and derived distributions using apt-get (requires <code>sudo</code>):</p> <pre><code>sudo apt-get install libcairo2-dev\nsudo apt-get install libgtk-3-dev\nsudo apt-get install libboost-all-dev\n</code></pre>"},{"location":"elements/setup/#install-cmake_3","title":"Install CMake","text":"<pre><code>sudo apt-get -y install cmake\n</code></pre>"},{"location":"elements/setup/#generating-the-project-using-cmake_3","title":"Generating the Project using CMake","text":"<p>There are multiple ways to generate a project file using CMake depending on your platform and desired IDE, but here are some examples for Linux:</p>"},{"location":"elements/setup/#using-unix-makefiles_1","title":"Using UNIX makefiles","text":"<ol> <li>CD to the elements library.</li> <li>Make a build directory inside the elements directory.</li> <li>CD to the build directory.</li> <li>invoke cmake.</li> </ol> <pre><code>cd elements\nmkdir build\ncd build\ncmake -G \"Unix Makefiles\" ../\n</code></pre> <p>If successful, cmake will generate Unix Make files in the build directory.</p>"},{"location":"elements/setup/#building-and-running-the-examples","title":"Building and Running the examples","text":"<p>CLion Project Tool Window</p> <p>If successful, cmake will generate a project file or makefiles in the build directory. Build the library and example programs using the generated makefiles or open the project file using your IDE and build all.</p> <p>You should see a couple of example applications in there that you can run. These examples are provided as starting points to get you up to speed in learning how to use the library. For simplicity, each example is contained in a single <code>main.cpp</code> source file.</p> <p>Feel free to inspect and mess with the examples. Each example demonstrates different aspects of the Elements library, from layout to control. You'd probably want to start with the \u201chello_universe\u201d example, which is the Element's hello-world counterpart. You can copy the \u201cempty\u201d example and use it as a boilerplate for your own project. See next section on how to copy an example and build outside the Elements project directory.</p> <p>Tips: 1. Resize the window and see the elements fluidly resize 2. Use two-finger swipe to move the sliders and knobs</p>"},{"location":"elements/setup/#building-outside-the-project","title":"Building Outside the Project","text":"<p>The Elements project is set up so that you can easily copy and paste any of the examples outside the project, set -DELEMENTS_ROOT=\"path/to/elements\", and the example should immediately build without any hassle.</p> <p>Here's an example for XCode assuming the elements lib is in the same directory alongside the \"hello_universe\" example directory you copied to:</p> <ol> <li>Copy the hello_universe example project directory.</li> <li>Make a build directory inside the hello_universe directory.</li> <li>CD to the build directory.</li> <li><code>cmake -GXcode -DELEMENTS_ROOT=\"../elements\" ../</code></li> </ol>"},{"location":"q/","title":"Audio DSP Library","text":""},{"location":"q/#introduction","title":"Introduction","text":"<p>Q is a cross-platform C++ library for Audio Digital Signal Processing. Aptly named after the \"Q factor\", a dimensionless parameter that describes the quality of a resonant circuit, the Q DSP Library is designed to be simple and elegant, as the simplicity of its name suggests, and efficient enough to run on small microcontrollers.</p> <p>Q leverages the power of modern C++ and efficient use of functional programming techniques, especially function composition using fine-grained and reusable function objects (both stateless and stateful), to simplify complex DSP programming tasks without sacrificing readability.</p> <p>Q is the host of some experimental Music related DSP facilities such as Virtual Pickups (Virtual pickup placement simulator) and Bitstream Autocorrelation (An extremely fast and efficient pitch detection scheme) the author has accumulated over the years as part of research and development, and will continue to evolve to accommodate more facilities necessary for the fulfillment of various Music related projects.</p> <p>The library is Open Source and released under the very liberal MIT license.</p>"},{"location":"q/#documentation","title":"Documentation","text":"<ol> <li>Design and Architecture</li> <li>Setup and Installation</li> <li>Hello, World</li> <li>Hello, Universe</li> <li>Fundamentals</li> </ol>"},{"location":"q/api/","title":"API","text":""},{"location":"q/api/#audio-dsp-library","title":"Audio DSP Library","text":""},{"location":"q/api/#file-structure","title":"File Structure","text":"<p>The library is organized with this simplified directory structure:</p> <ul> <li>docs</li> <li>example</li> <li>q_io</li> <li>external</li> <li>include</li> <li>src</li> <li>q_lib</li> <li>include</li> <li>test</li> </ul> <p><code>docs</code> is where this documentation resides. <code>example</code> contains self-contained and easy to understand c++ files that demonstrate various features of the library. <code>q_io</code> is the Audio and MIDI I/O layer which contains <code>external</code> \u20143rd party libraries used by the <code>q_io</code> module, <code>include</code> \u2014Header files and <code>src</code> \u2014Source files. <code>q_lib</code> is the header-only core DSP library in the <code>include</code> sub-directory. Finally, the <code>test</code> directory contains a bunch of c++ files for testing the library.</p>"},{"location":"q/api/#namespace","title":"Namespace","text":"<p>All entities in the Q library are placed in namespace <code>cycfi::q</code>. Everywhere in this documentation, we will be using a namespace alias to make the code less verbose:</p> <pre><code>   namespace q = cycfi::q;\n</code></pre>"},{"location":"q/api/#functors","title":"Functors","text":"<p>In the world of electronic music, there are processors and synthesizers, the definitions of which are somewhat overlapping and differ only on one specific point: that processors take in one or more input value(s) and produces one or more output value(s), whereas a synthesizer does not take in any inputs at all.</p> <p>In the Q world, both processors and synthesizers are just functors \u2014C++ function objects, which are basic building blocks that can be composed to form more complex functions. A functor can have zero or more input values and produces one or more output values (typically just one, but in certain cases, two or more output values may be returned in the form of C++ tuples).</p> <p>Syntactically, you use these just like any other function. So, for instance, for a single input functor:</p> <p><pre><code>   float r = f(s);\n</code></pre> where <code>s</code> is the input value, and <code>f(s)</code> returns a result and stores it in the variable <code>r</code>. Typical audio processor functors in the Q DSP library work on 32-bit <code>float</code> input samples with the normal -1.0 to 1.0 range.</p>"},{"location":"q/api/#values","title":"Values","text":"<p>Values are not restricted to sampled signals, however. For an example, signal envelopes are best represented in the decibel domain, and so dynamic-range processors such as compressors and expanders take <code>decibel</code> as inputs and return <code>decibel</code> results. For example:</p> <pre><code>   decibel gain = comp(env);\n</code></pre> <p>Another example, oscillators work on phase-angle inputs and return output samples:</p> <pre><code>   float out = sin(phase++);\n</code></pre> <p>The Q DSP library has a rich set of such types:</p> <ul> <li><code>float</code>: Typical sample data type -1.0 to 1.0 (or beyond for some   computational headroom).</li> <li><code>frequency</code>: Cycles per second (Hz).</li> <li><code>duration</code> : A time span (seconds, milliseconds, etc.)</li> <li><code>period</code> : The inverse of frequency</li> <li><code>phase</code>: Fixed point 1.31 format where 31 bits are fractional. <code>phase</code>   represents 0 to 2\u03c0 phase values suitable for oscillators.</li> <li><code>decibel</code>: Ratio of one value to another on a logarithmic scale (dB)</li> </ul> <p>The Q DSP library is typeful and typesafe. You can not mismatch values of different types such as <code>frequency</code> and <code>decibel</code>, for example. Such potentially disastrous mistakes can happen if all values are just raw floating point types.</p> <p>Values do not have implicit conversion to raw types, however, except for <code>decibel</code>, which is special because it operates on the logarithmic domain, comparison and arithmetic with raw types are possible. For example:</p> <pre><code>   auto harmonic = 440_Hz * 4; // 440_Hz is a frequency literal (see below)\n</code></pre>"},{"location":"q/api/#values-api","title":"Values API","text":"<p>See the Values API page for the complete API.</p>"},{"location":"q/api/#literals","title":"Literals","text":"<p>To augment the wealth of value types, the Q DSP library makes abundant use of C++ user-defined literals. Here are some examples:</p> <pre><code>   auto c4 = 261.6256_Hz;\nauto threshold = -36_dB;\nauto coef = 1.0 - (2_pi * 1_kHz / sps);\nauto attack = 20_ms;\n</code></pre> <p>To use these literals, include the <code>literals.hpp</code> header:</p> <pre><code>   #include &lt;q/support/literals.hpp&gt;\n</code></pre> <p>then use the <code>literals</code> namespace somewhere in a scope where you need it:</p> <pre><code>   using namespace q::literals;\n</code></pre> <p>Here's the list of available literals:</p> <pre><code>   // frequency\nconstexpr frequency operator \"\"  _Hz(long double val);\nconstexpr frequency operator \"\"  _Hz(unsigned long long int val);\nconstexpr frequency operator \"\"  _KHz(long double val);\nconstexpr frequency operator \"\"  _KHz(unsigned long long int val);\nconstexpr frequency operator \"\"  _kHz(long double val);\nconstexpr frequency operator \"\"  _kHz(unsigned long long int val);\nconstexpr frequency operator \"\"  _MHz(long double val);\nconstexpr frequency operator \"\"  _MHz(unsigned long long int val);\n// duration\nconstexpr duration operator \"\"   _s(long double val);\nconstexpr duration operator \"\"   _s(unsigned long long int val);\nconstexpr duration operator \"\"   _ms(long double val);\nconstexpr duration operator \"\"   _ms(unsigned long long int val);\nconstexpr duration operator \"\"   _us(long double val);\nconstexpr duration operator \"\"   _us(unsigned long long int val);\n// decibel\nconstexpr decibel operator \"\"    _dB(unsigned long long int val);\nconstexpr decibel operator \"\"    _dB(long double val);\n// pi\nconstexpr long double operator \"\" _pi(long double val);\nconstexpr long double operator \"\" _pi(unsigned long long int val)\n</code></pre>"},{"location":"q/api/#notes","title":"Notes","text":"<p>There is also a complete set of tables for notes from A[0] (27.5Hz) to Ab[9] (13289.75Hz). For example, to get the frequencies for each of the open strings in a 6-string guitar:</p> <pre><code>   // 6 string guitar frequencies:\nconstexpr auto low_e   = E[2];\nconstexpr auto a       = A[2];\nconstexpr auto d       = D[3];\nconstexpr auto g       = G[3];\nconstexpr auto b       = B[3];\nconstexpr auto high_e  = E[4];\n</code></pre> <p>To use these literals, include the <code>notes.hpp</code> header:</p> <pre><code>   #include &lt;q/support/notes.hpp&gt;\n</code></pre> <p>then use the <code>notes</code> namespace somewhere in a scope where you need it:</p> <pre><code>   using namespace q::notes;\n</code></pre>"},{"location":"q/design/","title":"Design and Architecture","text":"<p>The Q library comprises of two layers:</p> <ol> <li>q_lib: The core DSP library, which has no dependencies except the    standard c++ library. In the future, it is possible to make use additional    libraries, as long as the libraries depended upon are also self-contained.    q_lib is a no-frills, lightweight, header-only library.</li> <li>q_io: Audio and MIDI I/O layer, with very minimal dependencies    (portaudio and    portmidi) and very loose    coupling via thin wrappers that are easy to transplant and port to a host,    with or without an operating system, such as an audio plugin or direct to    hardware ADC and DAC.</li> </ol> <p></p> <p>By design, communication to and from the application, including but not limited to parameter control, is done exclusively via MIDI. We will track the development of the forthcoming (as of January 2019) MIDI 2.0, especially extended 16-bit and 32-bit resolution and MIDI Capability Inquiry (MIDI-CI) \"Universal System Exclusive\" messages.</p> <p>The architecture intuitively models real-world (hardware) effect processors (and synthesizers) with a) zero or more input channels and one or more output channels, and b) a means for communication and control via MIDI. Such design simplicity is fundamental. There is very clear separation of concerns. There are no graphical user interfaces. There are no direct hardware or software controls. User interface is outside the scope of the library. You deal with that elsewhere, or perhaps not at all.</p> <p>Such design simplicity makes it easy for applications to be incorporated in any hardware or software host. MIDI is a very simple protocol with a well defined and evolving standard. The ability to use any MIDI controller (again both hardware or software) to control an application is a very powerful and intuitive concept. It is the very concept that gave MIDI widespread appeal and ubiquity to begin with.</p> <p>This simplified control scheme using MIDI also allows applications to be easily testable in isolation \u2014a very desirable capability not typically found in more complex and monolithic systems.</p>"},{"location":"q/fundamentals/","title":"Fundamentals","text":""},{"location":"q/fundamentals/#table-of-contents","title":"Table of Contents","text":"<ul> <li>File Structure</li> <li>Namespace</li> <li>Functors</li> <li>Data Types</li> <li>value</li> <li>value subclasses<ul> <li>frequency</li> <li>period</li> <li>phase</li> <li>duration</li> </ul> </li> <li>decibel</li> <li>Literals</li> <li>Notes</li> </ul>"},{"location":"q/fundamentals/#file-structure","title":"File Structure","text":"<p>The library is organized with this simplified directory structure:</p> <ul> <li>docs: Where this documentation resides.</li> <li>example: Self-contained and easy to understand c++ programs that    demonstrate various features of the library.</li> <li>q_io:</li> <li>external: 3rd party libraries used by the <code>q_io</code> module.</li> <li>include: q_io header files.</li> <li>src: q_io source files.</li> <li>q_lib:</li> <li>include: Header-only core q_lib DSP library.</li> <li>test: Contains a comprehensive set of c++ files for testing the library.</li> </ul>"},{"location":"q/fundamentals/#namespace","title":"Namespace","text":"<p>All entities in the Q library are placed in namespace <code>cycfi::q</code>. Everywhere in this documentation, we will be using a namespace alias to make the code less verbose:</p> <pre><code>namespace q = cycfi::q;\n</code></pre>"},{"location":"q/fundamentals/#functors","title":"Functors","text":"<p>In the world of electronic music, there are processors and synthesizers, the definitions of which are somewhat overlapping and differ only on one specific point: that processors take in one or more input value(s) and produces one or more output value(s), whereas a synthesizer does not take in any inputs at all.</p> <p>In the Q world, both processors and synthesizers are just functors \u2014C++ function objects, which are basic building blocks that can be composed to form more complex functions. A functor can have zero or more input values and produces one or more output values (typically just one, but in certain cases, two or more output values may be returned in the form of C++ tuples).</p> <p>Syntactically, you use these just like any other function. So, for instance, for a single input functor:</p> <p><pre><code>float r = f(s);\n</code></pre> where <code>s</code> is the input value, and <code>f(s)</code> returns a result and stores it in the variable <code>r</code>. Typical audio processor functors in the Q DSP library work on 32-bit <code>float</code> input samples with the normal -1.0 to 1.0 range.</p>"},{"location":"q/fundamentals/#data-types","title":"Data Types","text":"<p>Values are not restricted to sampled signals, however. For an example, signal envelopes are best represented in the decibel domain, and so dynamic-range processors such as compressors and expanders take <code>decibel</code> as inputs and return <code>decibel</code> results. For example:</p> <pre><code>decibel gain = comp(env);\n</code></pre> <p>Another example, oscillators work on phase-angle inputs and return output samples:</p> <pre><code>float out = sin(phase++);\n</code></pre> <p>The Q DSP library has a rich set of such types:</p> <ul> <li><code>float</code>: Typical sample data type -1.0 to 1.0 (or beyond for some   computational headroom).</li> <li><code>frequency</code>: Cycles per second (Hz).</li> <li><code>duration</code> : A time span (seconds, milliseconds, etc.)</li> <li><code>period</code> : The inverse of frequency</li> <li><code>phase</code>: Fixed point 1.31 format where 31 bits are fractional. <code>phase</code>   represents 0 to 2\u03c0 phase values suitable for oscillators.</li> <li><code>decibel</code>: Ratio of one value to another on a logarithmic scale (dB)</li> </ul> <p>The Q DSP library is typeful and typesafe. You can not mismatch values of different types such as <code>frequency</code> and <code>decibel</code>, for example. Such potentially disastrous mistakes can happen if all values are just raw floating point types.</p> <p>Values do not have implicit conversion to raw types, however, except for <code>decibel</code>, which is special because it operates on the logarithmic domain, comparison and arithmetic with raw types are possible. For example:</p> <pre><code>   auto harmonic = 440_Hz * 4; // 440_Hz is a frequency literal (see below)\n</code></pre>"},{"location":"q/fundamentals/#value","title":"value","text":"<p>Type safe representation of a scalar value. <code>value</code> is a template parameterized by the underlying type, <code>T</code> and the derived class <code>Derived</code>.</p> <pre><code>template &lt;typename T, typename Derived&gt;\nstruct value;\n</code></pre>"},{"location":"q/fundamentals/#expressions","title":"Expressions","text":""},{"location":"q/fundamentals/#notation","title":"Notation","text":"<p>| <code>v</code>          | Scalar value.            | | <code>a</code>, <code>b</code>     | Instance of <code>value&lt;T&gt;</code>   |</p>"},{"location":"q/fundamentals/#constructors-and-assignment","title":"Constructors and assignment","text":"<pre><code>// Default constructor [1].\nvalue&lt;T&gt;{}\n// Constructor [2].\nvalue&lt;T&gt;{ v }\n// Copy constructor. [3]\nvalue&lt;T&gt;{ a }\n// Assignment [4]\na = b\n</code></pre>"},{"location":"q/fundamentals/#semantics","title":"Semantics","text":"<ol> <li>Default construct a <code>value&lt;T&gt;</code> with initial value <code>{ 0 }</code></li> <li>Construct a <code>value&lt;T&gt;</code> given initial value <code>v</code>.</li> <li>Copy construct a <code>value&lt;T&gt;</code>, <code>a</code>.</li> <li>Assign <code>b</code>, to <code>a</code>.</li> </ol>"},{"location":"q/fundamentals/#comparison","title":"Comparison","text":"<pre><code>a == b      // Equality\na == v      // Equality with a scalar\nv == b      // Equality with a scalar\na != b      // Non-equality\na != v      // Non-equality with a scalar\nv != b      // Non-equality with a scalar\na &lt; b       // Less than\na &lt; v       // Less than with a scalar\nv &lt; b       // Less than with a scalar\na &lt;= b      // Less than equal\na &lt;= v      // Less than equal with a scalar\nv &lt;= b      // Less than equal with a scalar\na &gt; b       // Greater than\na &gt; v       // Greater than with a scalar\nv &gt; b       // Greater than with a scalar\na &gt;= b      // Greater than equal\na &gt;= v      // Greater than equal with a scalar\nv &gt;= b      // Greater than equal with a scalar\n</code></pre>"},{"location":"q/fundamentals/#arithmetic","title":"Arithmetic","text":"<pre><code>+a          // Positive\n-a          // Negative\na += b      // Add assign\na -= b      // Subtract assign\na *= b      // Multiply assign\na /= b      // Divide assign\na + b       // Addition\na + v       // Addition with a scalar\nv + b       // Addition with a scalar\na - b       // Subtraction\na - v       // Subtraction with a scalar\nv - b       // Subtraction with a scalar\na * b       // Multiplication\na * v       // Multiplication with a scalar\nv * b       // Multiplication with a scalar\na / b       // Division\na / v       // Division with a scalar\nv / b       // Division with a scalar\n</code></pre>"},{"location":"q/fundamentals/#value-subclasses","title":"value subclasses","text":""},{"location":"q/fundamentals/#frequency","title":"frequency","text":"<p>Type safe representation of frequency in Hertz.</p> <pre><code>struct frequency : value&lt;double, frequency&gt;\n{\nconstexpr                     frequency(double val);\nconstexpr                     frequency(duration d);\nconstexpr explicit operator   double() const ;\nconstexpr explicit operator   float() const;\nconstexpr q::period           period() const;\n};\n</code></pre>"},{"location":"q/fundamentals/#expressions_1","title":"Expressions","text":"<p>In addition to valid expressions for <code>value&lt;T&gt;</code>, <code>frequency</code> allows these expressions.</p>"},{"location":"q/fundamentals/#notation_1","title":"Notation","text":"<p>| <code>d</code>       | Instance of <code>duration</code> (see below.)  | | <code>f</code>       | Instance of <code>frequency</code>              |</p>"},{"location":"q/fundamentals/#construction","title":"Construction","text":"<pre><code>// Construct a phase given the period (duration)\nphase{ d }\n</code></pre>"},{"location":"q/fundamentals/#conversions","title":"Conversions","text":"<pre><code>float(f)       // Convert frequency to a scalar (float)\ndouble(f)      // Convert frequency to a scalar (double)\n</code></pre>"},{"location":"q/fundamentals/#misc","title":"Misc","text":"<pre><code>f.period()     // get the period (1/f)\n</code></pre>"},{"location":"q/fundamentals/#duration","title":"duration","text":"<p>Type safe representation of duration.</p> <pre><code>struct duration : value&lt;double, duration&gt;\n{\nconstexpr                     duration(double val);\nconstexpr explicit operator   double() const;\nconstexpr explicit operator   float() const;\n};\n</code></pre>"},{"location":"q/fundamentals/#expressions_2","title":"Expressions","text":"<p>In addition to valid expressions for <code>value&lt;T&gt;</code>, <code>duration</code> allows these expressions.</p>"},{"location":"q/fundamentals/#notation_2","title":"Notation","text":"<p>| <code>d</code>    | Instance of <code>duration</code>            |</p>"},{"location":"q/fundamentals/#conversions_1","title":"Conversions","text":"<pre><code>float(d)       // Convert duration to a scalar (float)\ndouble(d)      // Convert duration to a scalar (double)\n</code></pre>"},{"location":"q/fundamentals/#period","title":"period","text":"<p>Type safe representation of period (reciprocal of frequency).</p> <pre><code>struct period : duration\n{\nusing duration::duration;\nconstexpr                     period(duration d);\nconstexpr                     period(frequency f);\n};\n</code></pre>"},{"location":"q/fundamentals/#expressions_3","title":"Expressions","text":"<p>In addition to valid expressions for <code>value&lt;T&gt;</code>, <code>period</code> allows these expressions.</p>"},{"location":"q/fundamentals/#notation_3","title":"Notation","text":"<p>| <code>d</code>       | Instance of <code>duration</code>      | | <code>f</code>       | Instance of <code>frequency</code>     | | <code>p</code>       | Instance of <code>period</code>        |</p>"},{"location":"q/fundamentals/#construction_1","title":"Construction","text":"<pre><code>// Construct a phase given a duration\nphase{ d }\n// Construct a phase given a frequency\nphase{ f }\n</code></pre>"},{"location":"q/fundamentals/#conversions_2","title":"Conversions","text":"<pre><code>float(p)       // Convert period to a scalar (float)\ndouble(p)      // Convert period to a scalar (double)\n</code></pre>"},{"location":"q/fundamentals/#phase","title":"phase","text":"<p>phase: The synthesizers use fixed point 1.31 format computations where 31 bits are fractional. phase represents phase values that run from 0 to 4294967295 (0 to 2\u03c0) suitable for oscillators.</p> <p>The turn, also cycle, full circle, revolution, and rotation, is a complete circular movement or measure (as to return to the same point) with circle or ellipse. A turn is abbreviated \u03c4, cyc, rev, or rot depending on the application. The symbol \u03c4 can also be used as a mathematical constant to represent 2\u03c0 radians.</p> <p>https://en.wikipedia.org/wiki/Angular_unit</p> <pre><code>struct phase : value&lt;std::uint32_t, phase&gt;\n{\nusing base_type = value&lt;std::uint32_t, phase&gt;;\nusing base_type::base_type;\nconstexpr static auto one_cyc = int_max&lt;std::uint32_t&gt;();\nconstexpr static auto bits = sizeof(std::uint32_t) * 8;\nconstexpr explicit            phase(value_type val = 0);\nconstexpr explicit            phase(float frac);\nconstexpr explicit            phase(double frac);\nconstexpr                     phase(frequency freq, std::uint32_t sps);\nconstexpr explicit operator   float() const;\nconstexpr explicit operator   double() const;\nconstexpr static phase        min();\nconstexpr static phase        max();\n};\n</code></pre>"},{"location":"q/fundamentals/#expressions_4","title":"Expressions","text":"<p>In addition to valid expressions for <code>value&lt;T&gt;</code>, <code>phase</code> allows these expressions.</p>"},{"location":"q/fundamentals/#notation_4","title":"Notation","text":"<p>| <code>f</code>          | A <code>double</code> or <code>float</code>    | | <code>freq</code>       | Instance of <code>frequency</code>  | | <code>sps</code>        | Scalar value             | | <code>p</code>          | Instance of <code>phase</code>  |</p>"},{"location":"q/fundamentals/#construction_2","title":"Construction","text":"<pre><code>// Construct a phase given the a fractional number from 0.0 to 1.0 (0 to 2\u03c0)\nphase{ f }\n// Construct a phase given the frequency and samples/second (`sps`)\nphase{ freq, sps }\n</code></pre>"},{"location":"q/fundamentals/#conversions_3","title":"Conversions","text":"<pre><code>float(p)       // Convert a phase to a scalar (float)\ndouble(p)      // Convert a phase to a scalar (double)\n</code></pre>"},{"location":"q/fundamentals/#min-and-max","title":"Min and Max","text":"<pre><code>phase::min()   // Get the minimum phase representing 0 degrees\nphase::max()   // Get the maximum phase representing 360 degrees (2\u03c0)\n</code></pre>"},{"location":"q/fundamentals/#decibel","title":"decibel","text":"<p>Decibel is unique. It does not inherit from <code>value&lt;T&gt;</code> because it is non-linear and operates on the logarithmic domain. The <code>decibel</code> class is perfectly suitable for dynamics processing (e.g. compressors and limiters and envelopes). Q provides fast decibel computations using lookup tables for converting to and from scalars.</p> <pre><code>struct decibel\n{\ndecibel();\ndecibel(double val);\nexplicit operator double() const;\nexplicit operator float() const;\nconstexpr decibel operator+() const;\nconstexpr decibel operator-() const;\ndouble val = 0.0f;\n};\n</code></pre>"},{"location":"q/fundamentals/#expressions_5","title":"Expressions","text":""},{"location":"q/fundamentals/#notation_5","title":"Notation","text":"<p>| <code>v</code>          | Scalar value.            | | <code>a</code>, <code>b</code>     | Instance of <code>decibel</code>    |</p>"},{"location":"q/fundamentals/#constructors-and-assignment_1","title":"Constructors and assignment","text":"<pre><code>// Default constructor [1].\ndecibel{}\n// Constructor [2].\ndecibel{ v }\n// Copy constructor. [3]\ndecibel{ a }\n// Assignment [4]\na = b\n</code></pre>"},{"location":"q/fundamentals/#semantics_1","title":"Semantics","text":"<ol> <li>Default construct a <code>decibel</code> with initial value <code>{ 0 }</code></li> <li>Construct a <code>decibel</code> given initial value <code>v</code>.</li> <li>Copy construct a <code>decibel</code>, <code>a</code>.</li> <li>Assign <code>b</code>, to <code>a</code>.</li> </ol>"},{"location":"q/fundamentals/#comparison_1","title":"Comparison","text":"<pre><code>a == b      // Equality\na != b      // Non-equality\na &lt; b       // Less than\na &lt;= b      // Less than equal\na &gt; b       // Greater than\na &gt;= b      // Greater than equal\n</code></pre>"},{"location":"q/fundamentals/#arithmetic_1","title":"Arithmetic","text":"<pre><code>+a          // Positive\n-a          // Negative\na += b      // Add assign\na -= b      // Subtract assign\na *= b      // Multiply assign\na /= b      // Divide assign\na + b       // Addition\na - b       // Subtraction\na * b       // Multiplication\na * v       // Multiplication with a scalar\nv * b       // Multiplication with a scalar\na / b       // Division\na / v       // Division with a scalar\n</code></pre>"},{"location":"q/fundamentals/#conversions_4","title":"Conversions","text":"<pre><code>float(a)    // Convert a decibel to a scalar (float)\ndouble(a)   // Convert a decibel to a scalar (double)\n</code></pre>"},{"location":"q/fundamentals/#literals","title":"Literals","text":"<p>To augment the wealth of value types, the Q DSP library makes abundant use of C++ user-defined literals.</p> <p>We take advantage of C++ (from c++11) type safe user-defined literals, instead of the usual <code>int</code>, <code>float</code> or <code>double</code> which can be unsafe when values from different units (e.g. frequency vs. duration) are mismatched. The Q DSP library makes abundant use of user-defined literals for units such as time, frequency and decibels (e.g. 24_dB, instead of a unit-less 24 or worse, a non-intuitive, unit-less 15.8 \u2014the gain equivalent of 24_dB). Such constants also make the code very readable, another objective of this library.</p> <p>Q Literals are placed in the namespace <code>q::literals</code>. The namespace is sparse enough to be hoisted into your namespace using <code>using namespace</code>:</p>"},{"location":"q/fundamentals/#example-expressions","title":"Example Expressions","text":""},{"location":"q/fundamentals/#frequencies","title":"Frequencies","text":"<pre><code>82.4069_Hz\n440_Hz\n1.5_KHz\n1.5_kHz\n1_KHz\n1_kHz\n0.5_MHz\n3_MHz\n</code></pre>"},{"location":"q/fundamentals/#durations","title":"Durations","text":"<pre><code>10.3_s\n1_s\n20.5_ms\n1_ms\n10.5_us\n500_us\n</code></pre>"},{"location":"q/fundamentals/#decibels","title":"Decibels","text":"<pre><code>-3.5_dB\n10_dB\n</code></pre>"},{"location":"q/fundamentals/#pi","title":"Pi","text":"<pre><code>2_pi\n0.5_pi\n</code></pre> <p>To use these literals, include the <code>literals.hpp</code> header:</p> <pre><code>#include &lt;q/support/literals.hpp&gt;\n</code></pre> <p>then use the <code>literals</code> namespace somewhere in a scope where you need it:</p> <pre><code>using namespace q::literals;\n</code></pre>"},{"location":"q/fundamentals/#notes","title":"Notes","text":"<p>There is also a complete set of tables for notes from <code>A[0]</code> (27.5Hz) to <code>Ab[9]</code> (13289.75Hz). For example, to get the frequencies for each of the open strings in a 6-string guitar:</p> <pre><code>// 6 string guitar frequencies:\nconstexpr auto low_e   = E[2];\nconstexpr auto a       = A[2];\nconstexpr auto d       = D[3];\nconstexpr auto g       = G[3];\nconstexpr auto b       = B[3];\nconstexpr auto high_e  = E[4];\n</code></pre> <p>To use these literals, include the <code>notes.hpp</code> header:</p> <pre><code>#include &lt;q/support/notes.hpp&gt;\n</code></pre> <p>then use the <code>notes</code> namespace somewhere in a scope where you need it:</p> <pre><code>using namespace q::notes;\n</code></pre>"},{"location":"q/hello_universe/","title":"Hello, Universe","text":"<p>Let us move on to a more elaborate example. How about a fully functional, bandwidth limited square wave synthesizer with ADSR envelope that controls an amplifier and a resonant filter and control the note-on and note-off using MIDI? Sounds good? This example is complete and self-contained in one .cpp file, kept as simple as possible to highlight the ease-of-use.</p> <p>:point_right: \u00a0 The full example can be found here: example/square_synth.cpp.</p> <p>Here's a short video clip:</p> <p>{% include vimeoPlayer.html id=419775584 width=732 height=462 %}</p> <p>After building the program, make sure you have a MIDI keyboard connected before starting the application. At startup, the app will present you with a list of available MIDI hardware and will ask you what you want to use:</p> <pre><code>================================================================================\nAvailable MIDI Devices (ID : \"Name\" inputs/outputs):\n0 : \"Code 61 USB MIDI\" 1/0\n1 : \"Code 61 MIDI DIN\" 1/0\n2 : \"Code 61 Mackie/HUI\" 1/0\n3 : \"Code 61 Editor\" 1/0\n4 : \"ZOOM R16_R24\" 1/0\n5 : \"Code 61 USB MIDI\" 0/1\n6 : \"Code 61 MIDI DIN\" 0/1\n7 : \"Code 61 Mackie/HUI\" 0/1\n8 : \"Code 61 Editor\" 0/1\n9 : \"ZOOM R16_R24\" 0/1\n================================================================================\nChoose MIDI Device ID: 0\n</code></pre> <p>And then a list of audio devices to choose from:</p> <pre><code>================================================================================\nAvailable Audio Devices (ID : \"Name\" inputs/outputs):\n0 : \"Built-in Microphone\" 2/0\n1 : \"Built-in Output\" 0/2\n2 : \"HDMI\" 0/2\n3 : \"ZOOM R16_R24 Driver\" 8/2\n================================================================================\nChoose Audio Device ID: 3\n</code></pre> <p>Take note that the demo is a console application. The Q library does not have a GUI, for good reason! We want to keep it as simple as possible. The GUI is taken cared of by other libraries (e.g. Elements).</p> <p>After choosing the MIDI and Audio driver, the synth is playable. The synth is monophonic and responds to velocity only, for simplicity.</p> <p>There are more demo applications in the example directory. After this quick tutorial, free to explore.</p>"},{"location":"q/hello_universe/#the-synth","title":"The Synth","text":"<p>Here's the actual synthesizer with the processing loop:</p> <pre><code>   struct my_square_synth : q::port_audio_stream\n{\nmy_square_synth(q::envelope::config env_cfg, int device_id)\n: port_audio_stream(q::audio_device::get(device_id), 0, 2)\n, env(env_cfg, this-&gt;sampling_rate())\n, filter(0.5, 0.8)\n{}\nvoid process(out_channels const&amp; out)\n{\nauto left = out[0];\nauto right = out[1];\nfor (auto frame : out.frames())\n{\n// Generate the ADSR envelope\nauto env_ = env();\n// Set the filter frequency\nfilter.cutoff(env_);\n// Synthesize the square wave\nauto val = q::square(phase++);\n// Apply the envelope (amplifier and filter) with soft clip\nval = clip(filter(val) * env_);\n// Output\nright[frame] = left[frame] = val;\n}\n}\nq::phase_iterator phase;            // The phase iterator\nq::envelope       env;              // The envelope\nq::reso_filter    filter;           // The resonant filter\nq::soft_clip      clip;             // Soft clip\n};\n</code></pre> <p>Our synth, a subclass of <code>q::port_audio_stream</code>, sets up buffers for the input and output audio streams and presents those to our processing loop (the <code>process</code> function above). In this example, we setup an audio stream with the selected device, no inputs and two (stereo) outputs:</p> <pre><code>port_audio_stream(q::audio_device::get(device_id), 0, 2)\n</code></pre>"},{"location":"q/hello_universe/#the-oscillator","title":"The Oscillator","text":"<p>Behind the scenes, there's a lot going on here, actually. But you will notice that emphasis is given to making the library very readable, easy to understand and follow by breaking down complex tasks into smaller manageable tasks and using function composition at progressively higher levels, while maintaining simplicity and clarity of intent.</p> <p>The synthesizer above is composed of smaller building blocks: fine grained C++ function objects. For example, here's the square wave oscillator (bandwidth limited using poly_blep).</p> <p>:point_right: \u00a0 For now, we will skim over details such as the <code>envelope</code>, <code>phase</code>, and <code>phase_iterator</code>, and  and this thing called <code>poly blep</code>. The important point, exemplified here, is that we want to keep our building blocks as simple and minimal as possible. We will cover that in greater detail later.</p> <p>The astute reader may notice that our <code>square_synth</code> class does not even have state!</p> <pre><code>   struct square_synth\n{\nconstexpr float operator()(phase p, phase dt) const\n{\nconstexpr auto middle = phase::max() / 2;\nauto r = p &lt; middle ? 1.0f : -1.0f;\n// Correct rising discontinuity\nr += poly_blep(p, dt);\n// Correct falling discontinuity\nr -= poly_blep(p + middle, dt);\nreturn r;\n}\nconstexpr float operator()(phase_iterator i) const\n{\nreturn (*this)(i._phase, i._incr);\n}\n};\nconstexpr auto square = square_synth{};\n</code></pre> <p>Yeah, that's the complete oscillator. That's all there is to it! :wink:</p> <p>The modern C++ savvy programmer will immediately notice the use of <code>constexpr</code>, applied judiciously all throughout the library. Such modern c++ facilities allow the compiler to generate extremely efficient code, even those that are generated at compile time. That means, for this example, that one can build an oscillator at compile time if needed, perhaps with constant wavetable results stored in read-only memory.</p>"},{"location":"q/hello_universe/#processing-midi","title":"Processing MIDI","text":"<p>The <code>midi_processor</code> takes care of MIDI events. Your application will have its own MIDI processor that deals with MIDI events that you are interested in. For this simple example, we simply want to process note-on and note-off events. On note-on events, our MIDI processor sets <code>my_square_synth</code>'s note frequency and triggers its envelope for attack. On note-off events, our MIDI processor initiates the envelope's release.</p> <pre><code>   struct my_midi_processor : midi::processor\n{\nusing midi::processor::operator();\nmy_midi_processor(my_square_synth&amp; synth)\n: _synth(synth)\n{}\nvoid operator()(midi::note_on msg, std::size_t time)\n{\n_key = msg.key();\nauto freq = midi::note_frequency(_key);\n_synth.phase.set(freq, _synth.sampling_rate());\n_synth.env.trigger(float(msg.velocity()) / 128);\n}\nvoid operator()(midi::note_off msg, std::size_t time)\n{\nif (msg.key() == _key)\n_synth.env.release();\n}\nstd::uint8_t      _key;\nmy_square_synth&amp;  _synth;\n};\n</code></pre>"},{"location":"q/hello_universe/#the-main-function","title":"The Main Function","text":"<p>In the main function, we instantiate <code>my_square_synth</code> and <code>my_midi_processor</code>. The synth constructor, in case you haven't noticed yet, requires an envelope configuration (<code>envelope::config</code>). Here, we provide our configuration. Take note that in this example, the envelope parameters are constant, for the sake of simplicity, but you can definitely have these controllable by the user by writing your own MIDI processor that deals with MIDI control change messages.</p> <p>Again, take note of the abundant use of user-defined literals for units such as duration (e.g. 100_ms) and level (e.g. -12_dB).</p> <pre><code>   auto env_cfg = q::envelope::config\n{\n100_ms      // attack rate\n, 1_s         // decay rate\n, -12_dB      // sustain level\n, 5_s         // sustain rate\n, 1_s         // release rate\n};\nmy_square_synth synth{ env_cfg };\n</code></pre> <p>Then, we create <code>my_midi_processor</code>, giving it a reference to <code>my_square_synth</code>. We'll also need a <code>midi_input_stream</code> that receives the actual incoming MIDI messages from the chosen hardware.</p> <pre><code>   q::midi_input_stream stream;\nmy_midi_processor proc{ synth };\n</code></pre> <p>Now we're all set. We start the synth and enter a loop that exits when the user presses ctrl-c (in which case the running flag becomes false). In the loop, we give our MIDI processor a chance to process incoming MIDI events as they arrive from the MIDI stream:</p> <pre><code>   synth.start();\nwhile (running)\nstream.process(proc);\nsynth.stop();\n</code></pre>"},{"location":"q/hello_world/","title":"Hello, World","text":"<p>Here's a quick \"Hello, World\" example that highlights the simplicity of the Q DSP Library: a delay effects processor.</p> <p>:point_right: \u00a0 The full example can be found here: example/delay.cpp.</p> <p>The example loads a pre-recorded wav file and plays it back with processing. The raw audio source will be played in the left channel while the delayed signal will be played in the right channel. Pretty much as straightforward as possible. The audio will be played using the currently selected audio device.</p>"},{"location":"q/hello_world/#the-dsp-code","title":"The DSP Code","text":"<pre><code>   // 1: fractional delay\nq::delay _delay{ 350_ms, 44100 };\n// 2: Mix the signal s, and the delayed signal (where s is the incoming sample)\nauto _y = s + _delay();\n// 3: Feed back the result to the delay\n_delay.push(_y * _feedback);\n</code></pre> <p>Normally, there will be a processing loop that receives the incoming samples, <code>s</code>. You place #1, the delay constructor, <code>q::delay</code>, before the processing loop and #2 and #3 inside inside the loop.</p> <p>44100 is the desired sampling rate. _feedback is the amount of feedback desired (anything from 0.0 to less than 1.0, e.g. 0.85). But take note of <code>350_ms</code>. Here, we take advantage of C++ (from c++11) type safe user-defined literals, instead of the usual <code>float</code> or <code>double</code> which can be unsafe when values from different units (e.g. frequency vs. duration) are mismatched. The Q DSP library makes abundant use of user-defined literals for units such as time, frequency and even sound level (e.g. 24_dB, instead of a unit-less 24 or worse, a non-intuitive, unit-less 15.8 \u2014the gain equivalent of 24_dB). Such constants also make the code very readable, another objective of this library.</p> <p>Processors such as <code>q::delay</code> are C++ function objects (sometimes called functors) that can be composed to form more complex processors. For example if you want to filter the delayed signal with a low-pass with a 1 kHz cutoff frequency, you apply the <code>q::lowpass</code> filter over the result of the delay:</p> <pre><code>   q::lowpass _lp{ 1_kHz, 44100 };\n</code></pre> <p>then insert the filter where it is needed in the processing loop:</p> <pre><code>   // 2: Add the signal s, and the delayed, low-pass filtered signal\nauto _y = s + _lp(_delay());\n</code></pre>"},{"location":"q/setup/","title":"Setup and Installation","text":""},{"location":"q/setup/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Requirements</li> <li>MacOS Installation</li> <li>Windows Installation</li> <li>Linux Installation</li> <li>Build and Test</li> </ul>"},{"location":"q/setup/#requirements","title":"Requirements","text":"<p>Here are the basic requirements and dependencies that you need to satisfy in order to use the library:</p> <ol> <li>A C++17 compiler</li> <li>git</li> <li>CMake 3.5.1 or higher</li> </ol> <p>Additionally, the following libraries are dragged as submodules:</p> <ol> <li>The Cycfi infra library</li> <li>portaudio Audio I/O library.</li> <li>portmidi MIDI I/O library.</li> </ol>"},{"location":"q/setup/#c17","title":"C++17","text":"<p>Q currently supports the MacOS, Windows and Linux. In the Mac, we support both XCode. Q is tested with XCode 10 and XCode 11. In Windows, we support Windows 10 with Visual Studio 2019, although it will probably also work with older versions of the Visual Studio IDE. In Linux, we support both Clang and g++ Get the latest version with a C++17 compiler. The CLion IDE is supported on all platforms.</p>"},{"location":"q/setup/#git","title":"Git","text":"<p>Clone the Q DSP library and its submodules:</p> <pre><code>git clone --recurse-submodules https://github.com/cycfi/Q.git\n</code></pre>"},{"location":"q/setup/#cmake","title":"CMake","text":"<p>Make sure you have CMake 3.5.1 or higher. Follow the installation procedure for your platform.</p>"},{"location":"q/setup/#generating-the-project-using-cmake","title":"Generating the Project using CMake","text":"<p>There are multiple ways to generate a project file using CMake depending on your platform and desired IDE, but here are some examples for MacOS 10.14, Windows 10 and, and Ubuntu 16.04:</p>"},{"location":"q/setup/#macos","title":"MacOS","text":"<p>Using XCode:</p> <ol> <li>CD to the Q library: <code>cd Q</code></li> <li>Make a build directory: 'mkdir build'</li> <li>CD to the the Q/build directory: <code>cd build</code></li> <li>Invoke cmake: <code>cmake -G\"Xcode\" ../</code></li> </ol> <p>If successful, cmake will generate an XCode project in the build directory.</p>"},{"location":"q/setup/#windows","title":"Windows","text":"<p>Using Visual Studio 2019</p> <ol> <li>CD to the Q library: <code>cd Q</code></li> <li>Make a build directory: 'mkdir build'</li> <li>CD to the the Q/build directory: <code>cd build</code></li> <li>Invoke cmake: <code>cmake -G\"Visual Studio 16 2019\" ../</code></li> </ol> <p>If successful, cmake will generate an Visual Studio solution project in the build directory.</p>"},{"location":"q/setup/#linux","title":"Linux","text":"<p>Using dpkg packaging system, stock g++ compiler and CodeBlocks.</p> <ol> <li>Install portaudio dependencies: <code>sudo apt-get install libasound-dev</code></li> <li>CD to the Q library: <code>cd Q</code></li> <li>Make a build directory: 'mkdir build'</li> <li>CD to the the Q/build directory: <code>cd build</code></li> <li>Invoke cmake: <code>cmake -G\"CodeBlocks - Unix Makefiles\" ../</code></li> </ol> <p>If successful, cmake will generate a CodeBlocks project in the build directory.</p>"},{"location":"q/setup/#build-and-test","title":"Build and Test","text":"<p>Build the project generated by cmake.</p> <p>Try running the tests and examples. If you intend to run the executables directly from the command line, make sure to change the directory to the same level where the <code>audio_files</code> is (e.g. 1 folder up on XCode builds). Some tests and examples may require audio clips that are found in this folder.</p> <p>To make sure everything is OK, try running the <code>sin_synth.cpp</code> example. Make sure your system's default audio device is set up and ready to play audio. The <code>sin_synth.cpp</code> program should play a 5 second 440 Hz sine wave. You might also want to try running the <code>list_devices.cpp</code> example that prints out all detected audio and MIDI devices.</p>"},{"location":"q/values/","title":"Values","text":""},{"location":"qplug/","title":"QPlug Audio Plugin Library","text":""},{"location":"qplug/#introduction","title":"Introduction","text":"<p>QPlug is modern c++ library for building Audio plugins that target various Audio plugin architectures. Qplug is designed to be easy-to-use and has a clean, and simple modern c++ API.</p>"},{"location":"qplug/#design-and-architecture","title":"Design and Architecture","text":"<p>QPlug sits on top of the Elements C++ GUI library which handles user interface, and the Q C++ Audio Digital Signal Processing library for MIDI and digital signal processing (DSP). Q provides the standardized realtime audio and MIDI streaming interfaces.</p> <p></p> <ol> <li> <p>Elements is a lightweight,    fine-grained, resolution independent, modular GUI library. You compose    very fine-grained, flyweight \u201celements\u201d to form deep element hierarchies    using a declarative interface with heavy emphasis on reuse.</p> </li> <li> <p>Q is a cross-platform C++ library for Audio    Digital Signal Processing. The Q DSP Library is designed to be simple and    elegant, leveraging the power of modern C++ and efficient use of    functional programming techniques, to simplify complex DSP programming    tasks without sacrificing readability.</p> </li> </ol> <p>QPlug currently targets AU (Audio Unit) and VST3 using iPlug2 as the backend engine. QPlug is not a framework. It is a modular, and generic library, with loose coupling between its layers and modules. It is for that matter that QPlug is retargetable, with a clean, well isolated API which exposes a not-so-thin abstraction layer on top of architecture-specific plugin frameworks such as VST and AU as well as architecture-independent plugin frameworks such as iPlug. It is possible to use other DSP libraries alongside Q.</p> <p>:pencil2: \u00a0 At one point, QPlug directly targeted Au and VST, before settling down to use iPlug2 which already supports various plugin architectures.</p>"},{"location":"qplug/#setup-and-installation","title":"Setup and Installation","text":"<p>WIP...</p>"},{"location":"qplug/setup/","title":"Setup and Installation","text":""}]}